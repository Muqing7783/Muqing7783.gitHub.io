<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaScript</title>
      <link href="/2022/02/06/javaScript/"/>
      <url>/2022/02/06/javaScript/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊语句</title>
      <link href="/2022/01/09/%E7%89%B9%E6%AE%8A%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/01/09/%E7%89%B9%E6%AE%8A%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>输入一个除空格以外的可见字符（保证在函数<code>scanf</code>中可使用格式说明符<code>%c</code>读入），输出其 ASCII 码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//此代码报错</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正确代码</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/2021/11/18/sql/"/>
      <url>/2021/11/18/sql/</url>
      
        <content type="html"><![CDATA[<p><strong>数据库期末考试复习题库(非常全面)</strong></p><p><strong>第一部分</strong></p><p> <strong>第一章</strong>：</p><p>一选择题：</p><p>1．在数据管理技术的发展过程中，经历了人工管理阶段、文件系统阶段和数据库系统阶段。在这几个阶段中，数据独立性最高的是        阶段。</p><p>  A．数据库系统  B．文件系统   C．人工管理   D．数据项管理        答案：A</p><p>2．数据库的概念模型独立于             。</p><p>  A．具体的机器和DBMS   B．E-R图   C．信息世界       D．现实世界   答案：A</p><p>3．数据库的基本特点是           。</p><p>  A．(1)数据可以共享(或数据结构化)  (2)数据独立性  (3)数据冗余大，易移植      (4)统一管理和控制</p><p>  B．(1)数据可以共享(或数据结构化)  (2)数据独立性  (3)数据冗余小，易扩充      (4)统一管理和控制</p><p>  C．(1)数据可以共享(或数据结构化)  (2)数据互换性  (3)数据冗余小，易扩充      (4)统一管理和控制</p><p>  D．(1)数据非结构化         (2)数据独立性  (3)数据冗余小，易扩充      (4)统一管理和控制  答案：B</p><p>\4.         是存储在计算机内有结构的数据的集合。</p><p>  A．数据库系统       B．数据库  C．数据库管理系统     D．数据结构   答案：B</p><p>5．数据库中存储的是          。</p><p>  A．数据        B．数据模型   C．数据以及数据之间的联系  D．信息  答案：C</p><p>\6. 数据库中，数据的物理独立性是指           。</p><p>  A．数据库与数据库管理系统的相互独立   B．用户程序与DBMS的相互独立</p><p>  C．用户的应用程序与存储在磁盘上数据库中的数据是相互独立的 D．应用程序与数据库中数据的逻辑结构相互独立  答案：C</p><p>\7. ．数据库的特点之一是数据的共享，严格地讲，这里的数据共享是指         。</p><p>  A．同一个应用中的多个程序共享一个数据集合  B．多个用户、同一种语言共享数据</p><p>  C．多个用户共享一个数据文件 D．多种应用、多种语言、多个用户相互覆盖地使用数据集合            答案：D</p><p>8.据库系统的核心是          。</p><p>  A．数据库   B．数据库管理系统   C．数据模型  D．软件工具                     答案：B</p><p>\9. 下述关于数据库系统的正确叙述是         。</p><p>  A．数据库系统减少了数据冗余 B．数据库系统避免了一切冗余 C．数据库系统中数据的一致性是指数据类型一致</p><p>  D．数据库系统比文件系统能管理更多的数据          答案：A</p><p>\10. 数将数据库的结构划分成多个层次，是为了提高数据库的   ①  和  ②  。</p><p>  ①A．数据独立性  B．逻辑独立性  C．管理规范性  D．数据的共享</p><p>  ②A．数据独立性  B．物理独立性   C．逻辑独立性  D．管理规范性                答案：①B  ②B</p><p>\11. 数据库(DB)、数据库系统(DBS)和数据库管理系统(DBMS)三者之间的关系是   。</p><p>  A．DBS包括DB和DBMS    B．DDMS包括DB和DBS  C．DB包括DBS和DBMS    D．DBS就是DB，也就是DBMS</p><p>  答案：A</p><p>\12. 在数据库中，产生数据不一致的根本原因是         。</p><p>  A．数据存储量太大  B．没有严格保护数据  C．未对数据进行完整性控制  D．数据冗余  答案：D</p><p>\13. 数据库管理系统(DBMS)是         。</p><p>  A．数学软件        B．应用软件  C．计算机辅助设计     D．系统软件   答案：D</p><p>\14. 数据库管理系统(DBMS)的主要功能是         。</p><p>  A．修改数据库   B．定义数据库  C．应用数据库   D．保护数据库  答案：B</p><p>\15. 数据库系统的特点是    、数据独立、减少数据冗余、避免数据不一致和加强了数据保护。</p><p>  A．数据共享  B．数据存储  C．数据应用  D．数据保密  答案：A</p><p>16据库系统的最大特点是       。</p><p>  A．数据的三级抽象和二级独立性    B．数据共享性  C．数据的结构化           D．数据独立性  答案：A</p><p>\17. 数据库管理系统能实现对数据库中数据的查询、插入、修改和删除等操作，这种功能称为         。</p><p>  A．数据定义功能  B．数据管理功能  C．数据操纵功能  D．数据控制功能  答案：C</p><p>\18. 数据库管理系统是         。</p><p>  A．操作系统的一部分  B．在操作系统支持下的系统软件  C．一种编译程序    D．一种操作系统      答案：B</p><p>19.据库的三级模式结构中，描述数据库中全体数据的全局逻辑结构和特征的是（）</p><p>  A．外模式  B．内模式  C．存储模式  D．模式         答案：D</p><p>20据库系统的数据独立性是指     B    。 </p><p>A．不会因为数据的变</p><p>化而影响应用程序  B．不会因为系统数据存储结构与数据逻辑结构的变化而影响应用程序</p><p>  C．不会因为存储策略的变化而影响存储结构  D．不会因为某些存储结构的变化而影响其他的存储结构      答案：B</p><p>21.信息世界中的术语，与之对应的数据库术语为         。</p><p>  A．文件  B．数据库  C．字段   D．记录          答案：D</p><p>22次型、网状型和关系型数据库划分原则是         。</p><p>  A．记录长度     B．文件的大小  C．联系的复杂程度  D．数据之间的联系  答案：D</p><p>23.传统的数据模型分类，数据库系统可以分为三种类型        。</p><p>  A．大型、中型和小型  B．西文、中文和兼容  C．层次、网状和关系  D．数据、图形和多媒体  答案：C</p><p>\24. 层次模型不能直接表示      。</p><p>A． 1 ：1关系    B．1 ：m关系        C． m ：n关系    D．1 ：1和1 ：m关系  答案：C</p><p>\25. 数据库技术的奠基人之一E.F．Codd从1970年起发表过多篇论文，主要论述的是      。</p><p>  A．层次数据模型  B．网状数据模型  C．关系数据模型  D．面向对象数据模型           答案：C</p><p>二、填空题</p><p>\1. 数据管理技术经历了 人工管理 、 文件系统  和  数据库系统 三个阶段。  答案：①人工管理  ②文件系统  ②数据库系统</p><p>\2. 数据库是长期存储在计算机内、有 组织的、可共享的数据集合。 答案：①组织 ②共享</p><p>3．DBMS是指   它是位于 用户 和 ③ 之间的一层管理软件。  答案：①数据库管理系统  ②用户  ③操作系统</p><p>\4. 数据库管理系统的主要功能有数据定义功能 、数据操纵功能 、数据库的运行管理和数据库的建立以及维护等4个方面。</p><p>答案：①数据定义功能  ②数据操纵功能</p><p>\5. 数据独立性又可分为逻辑数据独立性  和 物理数据独立性。 答案：①逻辑数据独立性  ②物理数据独立性</p><p>\6. 当数据的物理存储改变了，应用程序不变，而由DBMS处理这种改变，这是指数据的 物理独立性    。 答案：物理独立性</p><p>\7. 数据模型是由数据结构   、数据操作   和完整性约束   三部分组成的。  答案：①数据结构  ②数据操作  ③完整性约束</p><p>\8. 数据结构   是对数据系统的静态特性的描述，数据操作   是对数据库系统的动态特性的描述。  答案：①数据结构  ②数据操作</p><p>\9. 数据库体系结构按照 模式    、  外模式  和 内模式   三级结构进行组织。  答案：①模式  ②外模式  ③内模式</p><p>\10. 实体之间的联系可抽象为三类，它们是 1∶1     、 1∶m     和  m∶n    。  答案：①1∶1 ②1∶m ②m∶n</p><p>11．数据冗余可能导致的问题有   ①   和   ②   。  答案：①浪费存储空间及修改麻烦  ②潜在的数据不一致性</p><p>三：简答题：</p><p>\1. 什么是数据库?</p><p>答：数据库是长期存储在计算机内、有组织的、可共享的数据集合。数据库是按某种数据模型进行组织的、存放在外存储器上，且可被多个用户同时使用。因此，数据库具有较小的冗余度，较高的数据独立性和易扩展性。</p><p>\2. 什么是数据库的数据独立性?</p><p>  答：数据独立性表示应用程序与数据库中存储的数据不存在依赖关系，包括逻辑数据独立性和物理数据独立性。</p><p>  逻辑数据独立性是指局部逻辑数据结构(外视图即用户的逻辑文件)与全局逻辑数据结构(概念视图)之间的独立性。当数据库的全局逻辑数据结构(概念视图)发生变化(数据定义的修改、数据之间联系的变更或增加新的数据类型等)时，它不影响某些局部的逻辑结构的性质，应用程序不必修改。</p><p>  物理数据独立性是指数据的存储结构与存取方法(内视图)改变时，对数据库的全局逻辑结构(概念视图)和应用程序不必作修改的一种特性，也就是说，数据库数据的存储结构与存取方法独立。</p><p>\3. 什么是数据库管理系统?</p><p>  答：数据库管理系统(DBMS)是操纵和管理数据库的一组软件，它是数据库系统(DBS)的重要组成部分。不同的数据库系统都配有各自的DBMS，而不同的DBMS各支持一种数据库模型，虽然它们的功能强弱不同，但大多数DBMS的构成相同，功能相似。</p><p>  一般说来，DBMS具有定义、建立、维护和使用数据库的功能，它通常由三部分构成：数据描述语言及其翻译程序、数据操纵语言及其处理程序和数据库管理的例行程序。</p><p>\4. 什么是数据字典?数据字典包含哪些基本内容?</p><p>答：数据字典是数据库系统中各种描述信息和控制信息的集合，它是数据库设计与管理的有力工具，是进行详细数据收集和数据分析所获得的主要成果。数据字典的基本内容有：数据项、数据结构、数据流、数据存储和处理过程5个部分。</p><p><strong>第一章补充作业部分：</strong></p><p>假设教学管理规定：</p><p>①一个学生可选修多门课，一门课有若干学生选修；</p><p>②一个教师可讲授多门课，一门课只有一个教师讲授；</p><p>③一个学生选修一门课，仅有一个成绩。</p><p>学生的属性有学号、学生姓名；教师的属性有教师编号，教师姓名；课程的属性有课程号、课程名。</p><p>要求：根据上述语义画出ER图，要求在图中画出实体的属性并注明联系的类型；</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202111182202929.png" alt="img">解答：</p><p><strong>第<strong><strong>2</strong></strong>章关系数据库</strong></p><p>一、选择题</p><p>1、关系数据库管理系统应能实现的专门关系运算包括          。</p><p>  A．排序、索引、统计  B．选择、投影、连接  C．关联、更新、排序  D．显示、打印、制表  答案：B</p><p>2、关系模型中，一个关键字是               。</p><p>A．可由多个任意属性组成  B．至多由一个属性组成 </p><p> C．可由一个或多个其值能惟一标识该关系模式中任何元组的属性组成  D．以上都不是      答案：C</p><p>3、自然连接是构成新关系的有效方法。一般情况下，当对关系R和S使用自然连接时，要求R和S含有一个或多个共有的      。</p><p>  A．元组  B．行  C．记录  D．属性           答案：D</p><p>4、关系运算中花费时间可能最长的运算是         。</p><p>  A．投影  B．选择  C．笛卡尔积  D．除         答案：C</p><p>5．关系模式的任何属性         。</p><p>  A．不可再分         B．可再分  C．命名在该关系模式中可以不惟一  D．以上都不是   答案：A</p><p>6．在关系代数运算中，五种基本运算为         。</p><p>A．并、差、选择、投影、自然连接  B．并、差、交、选择、投影  </p><p>C．并、差、选择、投影、乘积  D．并、差、交、选择、乘积        答案：C</p><p>7、设有关系R，按条件f对关系R进行选择，正确的是         。</p><p>A．R´R      B．R wv R  C． sf(R)     D．Pf(R)</p><p>​            F                           答案：C</p><p>8、如图所示，两个关系R1和R2，它们进行     运算后得到R3。</p><p>R2</p><table><thead><tr><th>D</th><th>E</th><th>M</th></tr></thead><tbody><tr><td>1  2  5</td><td>M  N  M</td><td>I  J  K</td></tr></tbody></table><p> R1</p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>A  C  D</td><td>1  2  1</td><td>X  Y  y</td></tr></tbody></table><p>R3</p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>A  C  C</td><td>1  1  2</td><td>X  Y  y</td><td>M  M  N</td><td>I  I  J</td></tr></tbody></table><p>  A．交  B．并  C．笛卡尔积  D．连接          答案：D</p><p>二、填空题</p><p>1、一个关系模式的定义格式为        。  答案：关系名(属性名1，属性名2，…，属性名n)</p><p>2、．一个关系模式的定义主要包括 关系名     、属性名       、  属性类型     、</p><p>  属性长度     和关键字      。  答案：①关系名  ②属性名  ③属性类型  ④属性长度  ⑤关键字</p><p>3、．关系代数运算中，传统的集合运算有   ①   、   ②     、   ③   和  ④    。  答案：①笛卡尔积  ②并  ③交 ④差</p><p>4、关系代数运算中，基本的运算是   ①   、   ②   、   ③   、</p><p>   ④   和   ⑤   。  答案：①并 ②差  ③笛卡尔积 ④投影 ⑤选择</p><p>5、关系代数运算中，专门的关系运算有   选择   、  投影    和  连接    。  答案：①选择 ②投影 ③连接</p><p>6、关系数据库中基于数学上两类运算是关系代数     和关系演算     。答案：①关系代数 ②关系演算</p><p>7、．已知系(系编号，系名称，系主任，电话，地点)和学生(学号，姓名，性别，入学日期，专业，系编号)两个关系，系关系的主关键字是 ① ，系关系的外关键字 ② ，学生关系的主关键字是 ③ ，外关键字 ④   答案：①系编号  ②无  ③学号  ④系编号</p><p>**<br>**</p><p><strong>第<strong><strong>4</strong></strong>章数据库的安全性</strong></p><p>一、选择题</p><p>1、下面哪个不是数据库系统必须提供的数据控制功能        。</p><p>A．安全性  B．可移植性    C．完整性   D．并发控制     答案：B</p><p>2、保护数据库，防止未经授权的或不合法的使用造成的数据泄漏、更改破坏。这是指数据的      。</p><p>A．安全性  B．完整性   C．并发控制    D．恢复       答案：A</p><p>3、数据库的   完整性      是指数据的正确性和相容性。</p><p>A．安全性  B．完整性   C．并发控制    D．恢复       答案：B</p><p>4、在数据系统中，对存取权限的定义称为          。</p><p>A．命令     B．授权      C．定义      D．审计   答案：B</p><p>5、数据库管理系统通常提供授权功能来控制不同用户访问数据的权限，这主要是为了实现数据库的        。</p><p>A．可靠性   B．一致性   C．完整性   D．安全性         答案：D</p><p>6、下列SQL语句中，能够实现“收回用户ZHAO对学生表（STUD）中学号（XH）的修改权”这一功能的是    </p><p>A．REVOKE UPDATE(XH) ON TABLE FROM ZHAO    B．REVOKE UPDATE(XH) ON TABLE FROM PUBLIC</p><p>C．REVOKE UPDATE(XH) ON STUD FROM ZHAO     D．REVOKE UPDATE(XH) ON STUD FROM PUBLIC</p><p>答案：C</p><p>7、把对关系SC的属性GRADE的修改权授予用户ZHAO的SQL语句是         </p><p>A）GRANT GRADE ON SC TO ZHAO          B）GRANT UPDATE ON SC TO ZHAO</p><p>C）GRANT UPDATE (GRADE) ON SC TO ZHAO     D）GRANT UPDATE ON SC (GRADE) TO ZHAO  答案：C</p><p>8、在SQL Server 中删除触发器用（　　）。</p><p>A．ROLLBACK     B. DROP    C．DELALLOCATE   D. DELETE               答案：B</p><p>二、填空题</p><p>1、保护数据安全性的一般方法是  设置用户标识和存取权限控制         。 答案：设置用户标识和存取权限控制</p><p>2、安全性控制的一般方法有①、②、③、④和视图的保护五级安全措施。答案：①用户标识鉴定  ②存取控制 ③审计  ④数据加密</p><p>3、存取权限包括两方面的内容，一个是 ① ，另一个是 ②。  答案：①要存取的数据对象   ②对此数据对象进行操作的类型</p><p>4、在数据库系统中对存取权限的定义称为授权        。  答案：授权</p><p>5、在SQL语言中，为了数据库的安全性，设置了对数据的存取进行控制的语句，对用户授权使用 ① 语句，收回所授的权限使用  ②   语句。  答案：①GRANT  ②REVOKE</p><p>6、DBMS存取控制机制主要包括两部分：自主存取控制，_强制存取控制_______________。  答案：强制存取控制</p><p>7、 当对某一表进行诸如（　　）、 （　　）、 （　　） 这些操作时，SQL Server 就会自动执行触发器所定义的SQL 语句。</p><p>答案：INSERT，DELETE,UPDATE</p><p><strong>第<strong><strong>5</strong></strong>章数据库完整性</strong></p><p>一、选择题：</p><p>1、在数据库系统中，保证数据及语义正确和有效的功能是 （   ）</p><p>A.并发控制    B.存取控制    C.安全控制    D.完整性控制          答案：D</p><p>2、关于主键约束以下说法错误的是（ 　）</p><p>A. 一个表中只能设置一个主键约束  B.允许空值的字段上不能定义主键约束</p><p>C.允许空值的字段上可以定义主键约束 D.、可以将包含多个字段的字段组合设置为主键    答案：C</p><p>3、在表或视图上执行除了（ 　）以外的语句都可以激活触发器。</p><p>A.Insert        B. Delete       C. Update      D. Create                  答案：D</p><p>4、数据库的____是指数据的正确性和相容性。</p><p>A．安全性 B．完整性 C．并发控制 D．恢复                       答案：B</p><p>5、在数据库的表定义中，限制成绩属性列的取值在0到100的范围内，属于数据的________约束。</p><p>A、实体完整性B、参照完整性C、用户自定义D、用户操作                 答案：三、设计题</p><p>在学生课程管理数据库中创建一触发器，当向学生选课表插入记录时，检查该记录的学号在学生表中是否存在，检查该记录的课程号在课程表中是否存在，及选课成绩是否在0到100范围，若有一项为否，则不允许插入。</p><p>答案：</p><p>create trigger stu_ins_tri</p><p>on sc</p><p>for insert</p><p>as</p><p>begin </p><p>declare @s# char(6),@c# char(5),@grade int </p><p>select @s#=sno,@c#=cno,@grade=score</p><p>from inserted</p><p>if (@s# not in(select sno from student)) or (@c# not in (select cno from course) )or (@grade not between 0 and 100)</p><p>rollback transaction </p><p>else</p><p>print ‘成功插入’</p><p>end</p><p><strong>第<strong><strong>6</strong></strong>章关系数据理论</strong></p><p>一、选择题</p><p>1、关系规范化中的删除操作异常是指   ①   ，插入操作异常是指  ②  。</p><p>  A．不该删除的数据被删除  B．不该插入的数据被插入  C．应该删除的数据未被删除  D．应该插入的数据未被插入</p><p>  答案：①A ②D</p><p>2、设计性能较优的关系模式称为规范化，规范化主要的理论依据是      。</p><p>  A．关系规范化理论  B．关系运算理论  C．关系代数理论   D．数理逻辑     答案：A</p><p>3、规范化过程主要为克服数据库逻辑结构中的插入异常，删除异常以及冗余度大      的缺陷。</p><p>  A．数据的不一致性  B．结构不合理   C．冗余度大     D．数据丢失     答案：C</p><p>4、当关系模式R(A，B)已属于3NF，下列说法中      是正确的。</p><p>  A．它一定消除了插入和删除异常 B．仍存在一定的插入和删除异常   C．一定属于BCNF    D．A和C都是  答案：B</p><p>5、关系模型中的关系模式至少是      。 </p><p> A．1NF  B．2NF  C．3NF  D．BCNF                        答案：A</p><p>6、在关系DB中，任何二元关系模式的最高范式必定是      。</p><p>  A．1NF  B．2NF  C．3NF  D．BCNF                         答案：D</p><p>7、在关系模式R中，若其函数依赖集中所有候选关键字都是决定因素，则R最高范式是       。</p><p>  A．2NF  B．3NF  C．4NF  D．BCNF                   答案：C</p><p>8、候选关键字中的属性称为      。</p><p>  A．非主属性 B．主属性  C．复合属性 D．关键属性            答案：B</p><p>9、消除了部分函数依赖的1NF的关系模式，必定是       。</p><p>  A．1NF  B．2NF  C．3NF  D．4NF                   答案：B</p><p>10、关系模式的候选关键字可以有  ①  ，主关键字有  ②  。</p><p>  A．0个  B．1个  C．1个或多个 D．多个                答案：①C  ②B</p><p>11、关系模式的分解不惟一      。</p><p>  A．惟一  B．不惟一                           答案：B</p><p>12、根据关系数据库规范化理论，关系数据库中的关系要满足第一范式。下面“部门”关系中，因哪个属性而使它不满足第一范式?       。</p><p>  部门(部门号，部门名，部门成员，部门总经理)</p><p>  A．部门总经理  B．部门成员    C．部门名    D．部门号       答案：B</p><p>二、填空题</p><p>1、在关系A(S，SN，D)和B(D，CN，NM中，A的主键是S，B的主键是D，则D在S中称为       。答案：外部键</p><p>2、对于非规范化的模式，经过   ①   转变为1NF，将1NF经过   ②   转变为2NF，将2NF经过   ③   转变为3NF。</p><p>   答案：①使属性域变为简单域  ②消除非主属性对主关键字的部分依赖③消除非主属性对主关键字的传递依赖  </p><p>3、在关系数据库的规范化理论中，在执行“分解”时，必须遵守规范化原则：保持原有的依赖关系和无损连接性     。 答案：无损连接性</p><p><strong>第<strong><strong>7</strong></strong>章数据库设计</strong></p><p>一、选择题</p><p>1、在数据库设计中，用E-R图来描述信息结构但不涉及信息在计算机中的表示，它是数据库设计的  段。</p><p>A．需求分析   B．概念设计    C．逻辑设计    D．物理设计       答案：B</p><p>2、在关系数据库设计中，设计关系模式是       的任务。</p><p>A．需求分析阶段   B．概念设计阶段   C．逻辑设计阶段   D．物理设计阶段   答案：C</p><p>3、数据库物理设计完成后，进入数据库实施阶段，下列各项中不属于实施阶段的工作是        。</p><p>A．建立库结构  B．扩充功能    C．加载数据    D．系统调试            答案：B</p><p>4、在数据库的概念设计中，最常用的数据模型是        。</p><p>A．形象模型   B．物理模型    C．逻辑模型    D．实体联系模型          答案：D</p><p>5、从E-R模型关系向关系模型转换时，一个M∶N联系转换为关系模型时，该关系模式的关键字是        。</p><p>A．M端实体的关键字  B．N端实体的关键字  C．M端实体关键字与N端实体关键字组合 D．重新选取其他属性 答案：C</p><p>6、当局部E-R图合并成全局E-R图时可能出现冲突，不属于合并冲突的是       。</p><p>A．属性冲突   B．语法冲突    C．结构冲突    D．命名冲突           答案：B</p><p>7、概念模型独立于            。</p><p>A．E-R模型   B．硬件设备和DBMS    C．操作系统和DBMS    D．DBMS       答案：B</p><p>8、数据流程图（DFD）是用于描述结构化方法中        阶段的工具。</p><p>A．可行性分析  B．详细设计    C．需求分析    D．程序编码</p><p>答案：C</p><p>9、下图所示的E-R图转换成关系模型，可以转换为       关系模式。</p><p>A．1个    B．2个   C．3个    D．4个</p><p>答案：C</p><p>二、填空题</p><p>1、数据库设计的几个步骤是                        。</p><p>答案：需求分析，概念设计，逻辑设计，物理设计，系统实施，系统运行和维护</p><p>2、“为哪些表，在哪些字段上，建立什么样的索引”这一设计内容应该属于数据库     设计阶段。</p><p>答案：物理</p><p>3、在数据库设计中，把数据需求写成文档，它是各类数据描述的集合，包括数据项、数据结构、数据流、数据存储和数据加工过程等的描述，通常称为      。</p><p>答案：数据字典</p><p>4、在设计分E-R图时，由于各个子系统分别有不同的应用，而且往往是由不同的设计人员设计的，所以各个分E-R图之间难免有不一致的地方，这些冲突主要有  ①  、  ② 和   ③  三类。</p><p>答案：①属性冲突   ②命名冲突  ③结构冲突</p><p><strong>第8章数据库编程</strong></p><p>一、选择题</p><p>1、修改存储过程使用的语句是（　　）。</p><p>A. ALTER PROCEDURE  B. DROP PROCEDURE C. INSERT PROCEDUE  D. DELETE PROCEDUE    答案：A</p><p>2、创建存储过程的语句是（　　）。</p><p>A. ALTER PROCEDURE  B. DROP PROCEDURE  C. CREATE PROCEDUE  D. INSERT PROCEDUE    答案：C</p><p>3、下面（  ）组命令，将变量count值赋值为1。</p><p>A．DECLARE @count</p><p>SELECT @count=1</p><p>B．DIM count=1 </p><p>C．DECLARE count</p><p>SELECT count=1</p><p>D．DIM @count</p><p>SELECT @count=1</p><p>答案：A</p><p>4在SQL Server 中删除存储过程用（　　）。</p><p>A．ROLLBACK     B. DROP PROC  C．DELALLOCATE   D. DELETE PROC    答案：B</p><p>10．在SQL Server 编程中，可使用（　　）将多个语句捆绑。</p><p>A．｛ ｝    B. BEGIN-END   C．( )   D. [ ]        答案：B</p><p>二、填空题</p><p>1、 在T-SQL编程语句中，WHILE结构可以根据条件多次重复执行一条语句或一个语句块，还可以使用 （　　） 和 CONTINUE 关键字在循环内部控制 WHILE 循环中语句的执行。  答案：BREAK</p><p>2、 存储过程是存放在（　　）上的预先定义并编译好的T-SQL语句。  答案：SQL SERVER服务器上</p><p>3、游标是系统为用户开设的一个（  ），存放SQL语句的执行结果  答案：数据缓冲区</p><p><strong>第9章关系查询处理和查询优化</strong></p><p><strong>第10章数据库恢复技术</strong></p><p>一、   选择题</p><p>1、       是DBMS的基本单位，它是用户定义的一组逻辑一致的程序序列。</p><p>A．程序     B．命令       C．事务      D．文件      答案：C</p><p>2、事务的原子性是指                        。</p><p>A．事务中包括的所有操作要么都做，要么都不做  B．事务一旦提交，对数据库的改变是永久的</p><p>C．一个事务内部的操作及使用的数据对并发的其他事务是隔离的 D．事务必须是使数据库从一个一致性状态变到另一个一致性状态</p><p>答案：A</p><p>3、事务的一致性是指                       。</p><p>A．事务中包括的所有操作要么都做，要么都不做   B．事务一旦提交，对数据为的改变是永久的</p><p>C．一个事务内部的操作及使用的数据对并发的其他事务是隔离的 D．事务必须是使数据库从一个一致性状态变到另一个一致性状态</p><p>答案：D</p><p>4、事务的隔离性是指                       。</p><p>A．事务中包括的所有操作要么都做，要么都不做   B．事务一旦提交，对数据库的改变是永久的</p><p>C．一个事务内部的操作及使用的数据对并发的其他事务是隔离的 D．事务必须是使数据库从一个一致性状态变到另一个一致性状态</p><p>答案：C</p><p>5、事务的持续性是指                     。</p><p>A．事务中包括的所有操作要么都做，要么都不做   B．事务一旦提交，对数据库的改变是永久的</p><p>C．一个事力内部的操作及使用的数据对并发的其他事务是隔离的 D．事务必须是使数据库从一个一致性状态变到另一个一致性状态</p><p>答案：B</p><p>6、若数据库中只包含成功事务提交的结果，则此数据库就称为处于        状态。</p><p>A．安全   B、．一致   C．不安全   D．不一致           答案：B</p><p>7、若系统在运行过程中，由于某种原因，造成系统停止运行，致使事务在执行过程中以非控制方式终止，这时内存中的信息丢失，而存储在外存上的数据未受影响，这种情况称为         。</p><p>A．事务故障   B．系统故障    C．介质故障    D．运行故障    答案：B</p><p>8、若系统在运行过程中，由于某种硬件故障，使存储在外存上的数据部分损失或全部损失，这种情况称为          。</p><p>A．事务故障   B．系统故障    C．介质故障    D．运行故障    答案：C</p><p>9、        用来记录对数据库中数据进行的每一次更新操作。</p><p>A．后援副本   B．日志文件    C．数据库   D．缓冲区       答案：B</p><p>10、用于数据库恢复的重要文件是               。</p><p>A．数据库文件 B．索引文件    C．日志文件    D．备注文件      答案：C</p><p>11、数据库恢复的基础是利用转储的冗余数据。这些转储的冗余数据包括      。</p><p>A．数据字典、应用程序、审计档案、数据库后备副本  B．数据字典、应用程序、日志文件、审计档案</p><p>C．日志文件、数据库后备副本       D．数据字典、应用程序、数据库后备副本         答案：C</p><p>二、   填空题</p><p>1、  事务   是DBMS的基本单位，它是用户定义的一组逻辑一致的程序序列。答案：事务</p><p>2、．若事务在运行过程中，由于种种原因，使事务未运行到正常终止点之间就被撤消，这种情况就称为 事务故障  。答案：事务故障</p><p>3、数据库恢复是将数据库从 错误  状态恢复到 某一已知的正确状态  的功能。  答案：①错误 ②某一已知的正确状态</p><p>4、数据库系统在运行过程中，可能会发生故障。故障主要有事务故障、 系统故障 、介质故障和计算机病毒四类。答案：①事务故障②系统故障 ③计算机病毒</p><p>5、数据库系统是利用存储在外存上其他地方的  冗余数据  来重建被破坏的数据库。它主要有两种：  后援副本  和  日志文件  。</p><p>答案：①冗余数据   ②后援副本  ③日志文件</p><p>3、设有两个事务T1、T2，其并发操作如下所示，下列评价正确的是   。</p><p>A．该操作不存在问题   B．该操作丢失修改 C．该操作不能重复读 D．该操作读“脏”数据     答案：D</p><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>①读A=100  A=A*2写回  ②  ③ROLLBACK  恢复A=100</td><td>读A=10</td></tr></tbody></table><p>4、解决并发操作带来的数据不一致性总是普遍采用       。</p><p>A．封锁   B．恢复    C．存取控制    D．协商       答案：A</p><p>5、若事务T对数据R已经加X锁，则其他事务对数据R          。</p><p>A．可以加S锁不能加X锁  B．不能加S锁可以加X锁  C．可以加S锁也可以加X锁   D．不能加任何锁   答案：D</p><p>6、关于“死锁”，下列说法中正确的是             。</p><p>A．死锁是操作系统中的问题，数据库操作中不存在 B．在数据库操作中防止死锁的方法是禁止两个用户同时操作数据库</p><p>C．当两个用户竞争相同资源时不会发生死锁  D．只有出现并发操作时，才有可能出现死锁      答案：D</p><p>7、对并发操作若不加以控制，可能会带来           问题。</p><p>A．不安全  B．死锁    C．死机    D．不一致                     答案：D</p><p>8、并发操作会带来哪些数据不一致性           。</p><p>A．丢失修改、不可重复读、脏读、死锁  B．不可重复读、脏读、死锁 </p><p> C．丢失修改、脏读、死锁     D．丢失修改、不可重复读、脏读                答案：D</p><p>一、   填空题</p><p>1、DBMS的基本工作单位是事务，它是用户定义的一组逻辑一致的程序序列；并发控制的主要方法是   机制。  答案：封锁</p><p>2、有两种基本类型的锁，它们是   共享锁   和   排它锁   。答案：①共享锁 ②排它锁</p><p><strong>第二部分</strong></p><p><strong>第一章</strong> <strong>数据库系统概论</strong></p><p><strong>填空题</strong></p><p>1．数据库处理技术经历了 人工管理  、 文件管理 、 数据库管理 以及分布式数据库管理四个发展阶段。（07年7月考）（09年1、7月考）</p><p>\2. 在文件管理阶段，程序和数据在存储位置上是__分开___存放的。</p><p>\3. 在人工管理和文件管理阶段，程序设计  依赖于  数据表示。（09年1月考判断）</p><p>\4. 数据库系统具有 数据结构化  、 数据共享  、 数据独立性  、数据粒度小、独立的数据操作界面、由DBMS统一管理等优点。（08年1月、09.7考）</p><p>\5. 在文件管理阶段、文件之间是相互 独立 的，在数据库管理阶段，文件之间是相互       联系 的。（07年7月考是非题）</p><p>6．在_文件__系统中，不容易做到数据共享，在_数据库__系统中，容易做到数据共享。（08年1月考判断）</p><p>7．在文件系统中，存取数据的基本单位为__记录__，在数据库系统中，存取数据的基本单位为_数据项__。</p><p>\8. 在  文件 系统中，数据没有独立的操作界面，在 数据库 系统中数据具有独立的操作界面。（08年1月考）</p><p>\9. 在数据库系统中访问数据，既可以采用 程序执行 方式，也可以 视屏交互 采用方式。</p><p>\10. DBMS 具有 安全性  、 一致性  、 并发性  和 数据库恢复  等管理控制功能。（08年1月考）</p><p>11．分布式数据库系统既支持客户的_局部__应用，又支持客户的__全局__应用。（07年7月考是非题）</p><p>\12. 分布式数据库系统除了具有一般数据库系统的优点之外，还具有 兼容性好 、 可靠性高  、  地域范围广 、 数据量大  、 客户数多 等优点。</p><p>\13. 在实体中能作为码的属性称为 主属性 ， 否则称为 非主属性 。09.7考</p><p>\14. 域是实体中相应属性的 取值范围  ，性别属性的域包含 2  个值。（08年1月考）</p><p>\15. 实体之间的联系类型有三种，分别是 1对1、 1对多 和 多对多 。（08、07年7月考）（09年1月考）</p><p>16．若实体A和B是多对多的联系，实体B和C是1对1的联系，则实体A和C是__多__对__多__的联系。（09年1月考选择）</p><p>17．若实体A和B是1对多的联系，实体B和C是1对多的联系，则实体A和C是__1 对___多__的联系。</p><p>18．若实体A和B是1对多的联系，实体B和C是多对1的联系，则实体A和C是___ ___多_对___多_____的联系。</p><p>\19. 任一种数据模型都有_ 型___和___值___的区别。（08年7月考）</p><p>\20. 把保存_关系定义__的关系称为对应数据库的元关系，一个数据库的元关系由__DBMS_自动建立。（08年1月考）</p><p>\21. 关系数据库系统具有 数据结构 单一、采用 集合运算 、数据完全 独立 、    数学 理论支持等优点。（08年7月考）（08年1月考）</p><p>\22. 在 对象 数据模型中， 对象 不但能够继承，而且能够嵌套。（07、09年7月考是非题）</p><p>在非关系模型中操作记录的方式是 过程 式的，在关系模型中操作记录的方式是      集合 式的。</p><p>23．关系中的每一行称为 元组  ，每一列称为  属性  。</p><p>\24. 在数据库体系结构中，两级数据映像分别是指  外模式和模式 之间的数据映像与      模式和内模式 之间的数据映像。（08年1月考）</p><p>\25. 数据库系统的三级模式结构和两级数据映像确保了数据的 物理 独立性和 逻辑  独立性。（08年7月考）（07年7月考）</p><p><strong>第二章</strong> <strong>关系运算</strong></p><p>\1. 关系数据模型包括 关系数据结构  、 关系完整性规则 和 关系运算  三个方面。（07年7月考）（09年1、7月考）</p><p>2．设D1,D2和D3域的基数分别为2,3和4，则D1´D2´D3的元组数为__24__，每个元组有__3__个分量。（07、09年7月考）</p><p>\3. 学生关系中的班级号属性与班级关系中的班级号主码属性相对应，则__班级号_为学生关系中的_外码__。（07年7月考）</p><p>\4. 若一个关系为R（学生号，姓名，性别，年龄），则 学生号 可以作为该关系的主码，姓名、性别和年龄为该关系的 非主 属性。（07年7月考）</p><p>\5. 在候选码中的每个属性被称为 主 属性，不在任何候选码中的每个属性被称为       非主 属性。（09年1、7月考）</p><p>\6. 关系完整性包括 实体  完整性、 参照 完整性和 用户定义  完整性三个方面。（08年1月考）</p><p>\7. 在参照和被参照的关系中，每个外码值或者为 空 ，或者等于另一个关系中的 主码 值。</p><p>\8. 设一个集合A={3,4,5,6,7} ，集合B={1,3,5,7,9}，则A和B的并集中包含有 7个元素，A和B的交集中包含有 3 个元素，A和B的差集中包含有 2 个元素。（07年7月考）</p><p>\9. 设一个关系A具有a1个属性和a2个元组，关系B具有b1个属性和b2个元组，则关系A×B具有 a1+b1 个属性和 a2 x b2 个元组。（08年7月考）</p><p>\10. 专门的关系运算包括__选择___、_投影_、__连接__和__除__四种。</p><p>\11. 设一个学生关系为S(学生号，姓名)，课程关系为C(课程号，课程名)，选课关系为X(学生号，课程号，成绩)，则至少选修了课程号为‘001’和‘002’课程的全部学生信息所对应的运算表达式为 S &gt;&lt;  Π学生号 (δ课程号=‘001’∨课程号=‘002’（  X  ）)</p><p>\12. 设一个学生关系为S(学生号，姓名)，课程关系为C(课程号，课程名)，选课关系为X(学生号，课程号，成绩)，则选修了课程名为‘程序设计’课程的全部学生信息所对应的运算表达式为S &gt;&lt; （  Π学生号  ( X  &gt;&lt;（ δ课程号=’程序设计’  (C )））)。</p><p>\13. 设一个学生关系为S(学生号，姓名)，课程关系为C(课程号，课程名)，选课关系为X(学生号，课程号，成绩)，则姓名为变量K的值的学生所选修的全部课程信息所对应的运算表达式为__C__&gt;&lt; Õ课程号(<em>X__&gt;&lt;(δ姓名=K(<em>S</em></em>_)))。（09年1月考判断）</p><p>\14. 设一个学生关系为S(学生号，姓名)，课程关系为C(课程号，课程名)，选课关系为X(学生号，课程号，成绩)，求出所有选课的学生信息的运算表达式为__ Õ课程号(<em>X</em>)_____与__C___的自然连接。（07、09年7月考是非题）</p><p><strong>第三章</strong> <strong>关系规范化基础</strong></p><p>1．在一个关系R中，若属性集X函数决定属性集Y，则记作为_X→Y_，称X为 决定因素 。</p><p>\2. 在一个关系R中，若X→Y且 X Í Y，则称X→Y为 非平凡 依赖，否则，若X→Y且X ÊY，则称X→Y为 平凡 依赖。（08年7月考）</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202111182202615.png" alt="img">3. 在一个关系R中，“职工号”函数决定“姓名”既是 非平凡 函数依赖，又是 完全 函数依赖。（07、09年7月考）</p><p>\4. 已知“职工号→性别”成立，则“（职工号，性别）→ 性别”既是 平凡 函数依赖，又是 部分 函数依赖。（08年1月考）</p><p>\5. 在一个关系R中，若存在“学号→系号，系号→系主任”，则隐含存在着__学号__函数决定__系主任___。（08年7月考）</p><p>\6. 在一个关系R中，若存在X→Y和X→Z，则存在 X→（Y，Z）  ，称此为函数依赖的 合并性 规则。（08年1月考）</p><p>\7. 在一个关系R中，若存在X→(Y,Z)，则也隐含存在__X→Y__和_ X→Z_，称此为函数依赖的__分解性___规则。（08年7月考）（07、09年7月考）</p><p>\8. 在一个关系R中，若X能够函数决定关系R中的每个属性，并且X的任何真子集都不能函数决定R中的每个属性，则称 X  为关系R的一个 候选码  。（08年7月考）</p><p>\9. 一个关系的候选码能够函数决定每个属性，其中除了存在完全函数决定外， 也允许存在 部分 函数决定和 传递 函数决定。（08年1月考）</p><p>\10. 设一个关系为R(A,B,C,D,E)，它的最小函数依赖集为FD={A→B,C→D,（A,C）→E}，则该关系的候选码为__（A，C）__，该候选码含有_2__属性。</p><p>\11. 设一个关系为R(A,B,C,D,E,F )，它的最小函数依赖集为FD={A→B,A→C, D→E, D→F}，则该关系的候选码为__（A，D）___，该候选码含有___2___属性。（08年1月、09.7考）</p><p>\12. 设一个关系为R(A,B,C,D,E,F,G )，它的最小函数依赖集为FD={A→B,C→D, B→E, E→F}，则该关系的候选码为_（A，C，G）__，该候选码含有_3__属性。（08年1月、07年7月考）</p><p>\13. 对关系进行规范化，通常只要求规范化到 第三 范式，该规范化过程能够很好的保持数据的 无损连接 性和 函数依赖 性。（08年1月考）</p><p>\14. 一个关系若存在部分函数依赖和传递函数依赖，则必然会造成数据 冗余 以及 插入 、 删除 和 修改  异常。（08年7月考）</p><p>\15. 设一个关系为R(A,B,C,D,E)，它的最小函数依赖集为FD={A→B,A→C,(A,D)→E}，则该关系的候选码为_（A，D）__，该关系存在着_部分__函数依赖。（08年7月考）</p><p>\16. 设一个关系为R(A,B,C,D,E)，它的最小函数依赖集为FD={A→B,C→D,C→E}，该关系只满足_ 第一__范式，若要规范化为高一级的范式，则将得到_3_个关系。（08年7月考）</p><p>\17. 关系数据库中的每个关系必须最低达到__第一__范式，该范式中的每个属性都是__不可再分__的。</p><p>\18. 一个关系若存在部分函数依赖和传递函数依赖，则必然会造成 数据冗余 和 操作异常 。（09年7月考）</p><p>\19. 设一个关系为R(A,B,C,D,E,F,G)，它的最小函数依赖集为FD={A→B,A→C,C→D,C→E,A→F,F→G}，该关系满足 第二_范式，若要规范化为高一级的范式，则将得到_3_个关系。（09年1月考）</p><p>\20. 若一个关系的任何非主属性都不部分依赖和传递依赖于任何候选码，则称该关系达到__第三__范式。（09年1月考选择、判断）</p><p><strong>第四章</strong> <strong>结构化查询语言</strong><strong>—–SQL</strong></p><p><strong>一、填空题</strong></p><p>\1. 数据库系统的外模式在SQL中称为 视图 ，它由 基本表  产生出来。</p><p>\2. SQL是高度 非过程化 和面向 集合 操作的语言。（08、07年7月考）（09年1月考）</p><p>\3. 由create schema KUCUN authorization LIU 命令建立的一个数据库名为 KUCUN ，所有者为 LIU 。（07年7月考）</p><p>\4. 在SQL中建立和删除数据库模式的命令分别为_create database __和__drop database___。 </p><p>\5. 在SQL中完整性约束分为 列级 完整性约束和  表级  完整性约束两个方面。</p><p>\6. 在 列级 完整性约束中，每个约束只能涉及到1个属性，在 表级 完整性约束中，每个约束可以涉及到多个属性。（08年7月考）</p><p>\7. 在SQL中，列级完整性约束分为 6 种情况，表级完整性约束分为 4 种情况。</p><p>\8. 在SQL中，主码约束的关键字为 primary key ，外码约束的关键字为 foreign key 。（08年7月考）（08年1月考）</p><p>\9. 在SQL中，单值约束的关键字为 unique  ，检查约束的关键字为  check 。（08年7月考）（07年7月考）（09年1月考）</p><p>\10. 在SQL中，create table 、alter table 和drop table 命令分别为在数据库中 建立 、_修改__和 删除 基本表结构的命令。（08年1月考）（09年1月考选择）</p><p>\11. 向基本表中插入数据有两种命令格式，一种称为 单行 插入格式，另一种称为       多行 插入格式。（08年7月考）</p><p>\12. 在SQL中，对基本表进行插入、修改和删除记录命令分别为_insert _、___update__和_delete_命令。（08年1月考）</p><p>\13. 在SQL中，每个视图中的列可以来自不同的　表　，它是在原有表的基础上　　　　　　　　　建立 的逻辑意义上的新关系。（09年1月考判断）</p><p>\14. 在SQL查询语句中，group by 选项实现 分组 功能，order by 选项实现对结果表的      排序 功能。（07年7月考）</p><p>\15. 在新版的SQL中，查询所涉及到的表及表之间的连接是在from选项中实现的，表之间的连接共有三种方式，分别称为_中间连接__、__左连接__和_右连接___。（08、09年7月考）</p><p><strong>第五章</strong> <strong>数据库应用系统设计</strong></p><p>1．一个数据库应用系统的开发过程大致相继经过_需求分析_、___概念设计_、逻辑设计、物理设计、机器实现、运行维护等六个阶段。</p><p>\2. 需求分析阶段的主要目标是画出__数据流图_、建立__数据字典_和编写_需求说明书_。</p><p>\3. 需求说明书是系统总体设计方案，是 开发 单位和 用户 单位共同协商达成的文档。（08年7月考）</p><p>\4. 概念设计阶段的主要任务是：首先根据系统的各个局部应用画出各自对应的__ER图 _，然后再进行综合和整体设计，画出_整体ER图_。</p><p>\5. 由概念设计进入逻辑设计时，原来的 多对多 联系通常需要被转换为对应的 基本表 。（08年7月考）</p><p>\6. 在进行系统调试时，要有意地使用各种不同的__数据_和进行各种不同的__操作__，去测试系统中的所有方面。（08年1月考）</p><p>\7. 在旅店管理中，_客房表_只派生出一个视图，该视图被称为_客房空闲表_。（09年1月考）</p><p><strong>第八、九章</strong> <strong>SQL Server****数据库</strong></p><p><strong>一、单选题</strong></p><p>\1. Microsoft 公司的SQL Server 2000 数据库管理系统一般只能运行在（A）。（07年7月考）</p><p> A. Windows 平台 　　　　　B. UNIX平台</p><p>C. LINX平台    　　　D. NetWare 平台</p><p>\2. 当一条SELECT语句访问一张大表里的有限几行数据时，SQL Server2000 通常会（ B ）。</p><p>A. 为数据加上页级锁　　　　　B. 为数据加上行级锁</p><p>C. 需要用户的干涉和参与　　　D. 使用户独占数据库</p><p>\3. SQL Server 2000 的物理存储主要包括3类文件（ A ）。</p><p> A. 主数据文件、次数据文件、事务日志文件</p><p> B. 主数据文件、次数据文件、文本文件</p><p> C. 表文件、索引文件、存储文件</p><p> D. 表文件、索引文件、图表文件</p><p>\4. 当数据库损坏时，数据库管理员可通过何种方式恢复数据库（ A ）。</p><p>A. 事务日志文件　　　　　　B. 主数据文件</p><p>C. DELETE语句　　　　  D. 联机帮助文件</p><p>\5. SQL Server 2000 系统中的所有系统级信息存储于哪个数据库（ A ）。</p><p> A. master     B. model   C. tempdb    D.msdb </p><p>\6. SQL Server提供的单行注释语句是使用（  B ）开始的一行内容。</p><p>A. “/*”    B. “–”    C. “｛”    D. “/”</p><p>\7. 下列标识符可以作为局部变量使用（ C ）。</p><p>  A. [@myvar ]    B. my var   C. @myvar    D. @my var</p><p><strong>二、填空题</strong></p><p>\1.  SQL Server 2000与Windows 2000等操作系统完全集成，可以使用操作系统的用户名和域账号作为数据库的 注册账号 。（08年7月考）</p><p>\2. SQL Server 2000 采用的结构化查询语言称为  Transaction-SQL 。</p><p>\3. 常见的SQL Server2000的版本一般包括 企业版  、 标准版 、 个人版 、开发版和评估版等。（08年7月考）（09年1月考）</p><p>\4. SQL Server 2000服务管理器的主要作用是启动、 暂停 、 停止 服务器。</p><p>\5. 安装SQL Server 2000时需要以本地  系统管理员  身份登录操作系统。</p><p>\7.  SQL Server 2000的数据库分为 系统数据库 和 用户数据库 两种类型。</p><p>\8. 每个SQL Server 2000数据库下都包括 master 、 model 、 tempdb 和 msdb 四个系统数据库。</p><p>\9. SQL Server客户机传递到服务器上的一组完整的数据和SQL语句称为 批处理 。</p><p>\10. 一般可以使用  Go 命令来标识Transact-SQL 批处理的结束。</p><p>\11. varchar 数据类型可以自动去掉字段或变量尾部的 空格 以节省空间。（09年1月考判断）</p><p>\12. 在一个已存在数据的表中增加不带默认值的列，一定要保证所增加的列允许 null 值。（09年1月考判断）</p><p>\13. 索引可以加速Select语句中order by 和 group by  选项的执行速度。（09年1月考判断）</p><p>\14. 聚集索引与非聚集索引相比，查询速度要 快  。（08年1月考）</p><p>\15. 单行或行尾注释的开始标记为_- - <em>，多行注释的开始标记为</em><em>/*<em>，结束标记为</em></em>_     */__。（08年1月考）</p><p>\17. 每条__select___语句能够同时为多个变量赋值，每条__set__语句只能为一个变量赋值。（08年7月考）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS实例</title>
      <link href="/2021/11/18/HTML-CSS%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/11/18/HTML-CSS%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h1><h2 id="实现滚动贴合-Scroll-Snap-特效"><a href="#实现滚动贴合-Scroll-Snap-特效" class="headerlink" title="实现滚动贴合 Scroll Snap 特效"></a>实现滚动贴合 Scroll Snap 特效</h2><p>解释：滑动图片或其他元素自动贴合到浏览器的顶部或底部</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>实现滚动贴合 Scroll Snap 特效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#pink</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#blue</span></span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> royalblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">main</span><span class="token punctuation">{</span>            <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y mandatory<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            y表示纵向滚动贴合            mandatory表示强制滚动方式            需要把滚动条设置到父容器，            scroll-snap-type才能生效，默认是在body上，现在是在main上*/</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token selector">section</span><span class="token punctuation">{</span>               <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vm<span class="token punctuation">;</span>               <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>               <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*子元素的贴合对齐方式*/</span>           <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--表示滚动的容器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--需要滚动贴合的内容 ---></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>内容4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记</title>
      <link href="/2021/10/31/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/31/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2021/10/13/CSS/"/>
      <url>/2021/10/13/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote></blockquote><p>== 表现 ==</p><p>网页分成三个部分</p><p>结构（HTML）</p><p>表现（CSS）</p><p>行为（JS）</p><blockquote></blockquote><p>层叠样式表，（类似PS图层）</p><p>网页是实际上是一个多层的结构，通过CSS可以分别为网页的每一层来设置样式，而最终只能看到最上边的一层</p><h2 id="第一种使用方法："><a href="#第一种使用方法：" class="headerlink" title="第一种使用方法："></a>第一种使用方法：</h2><p>内联样式（行内样式）：</p><p>在标签内部通过style属性来设置元素的样式</p><pre class=" language-css"><code class="language-css">&lt;p style=<span class="token string">"color: royalblue;font-size: 20px"</span>>我们生活在阴沟里，但有人依然仰望星空。&lt;/p></code></pre><p>不推荐在开发中使用这种方法</p><h2 id="第二种使用方法（内部样式表）"><a href="#第二种使用方法（内部样式表）" class="headerlink" title="第二种使用方法（内部样式表）"></a>第二种使用方法（内部样式表）</h2><p>将样式写道head中的style标签里，然后通过CSS的选择器来选中元素并为其设置各种样式，可以同时为多个标签设置眼样式，并且只需要修改一处即可全部应用。</p><p>内部样式表更加方便对样式表进行复用</p><h2 id="第三种使用方法（）外部样式表"><a href="#第三种使用方法（）外部样式表" class="headerlink" title="第三种使用方法（）外部样式表"></a>第三种使用方法（）外部样式表</h2><p>可以将CSS样式编写到外部的一个CSS文件中，进行调用，多个页面都可以调用</p><p>通过link标签进行引入</p><p>将样式编写到外部的CSS文件中，可以使用到浏览器的缓存机制，从而加快网页的速度，提高用户体验</p><h2 id="CSS的基本语法："><a href="#CSS的基本语法：" class="headerlink" title="CSS的基本语法："></a>CSS的基本语法：</h2><p>CSS的基本语法</p><p>选择器 声明块</p><p>选择器，通过选择器可以选中页面中的指定元素</p><p>比如p的作用就是选中页面中所有的p元素</p><p>声明块，通过声明块来指定要为元素设置的指定样式</p><p>声明块由一个一个的声明组成</p><p>声明是一个名值对结构</p><p>一个样式名对应一个样式值，名和值之间以：连接，以；结尾</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><p>将所有段落设置为 红色（字体）</p><p>语法：标签名{ }</p><p>例子：p{ }   h1{ }  div{ }</p><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>作用：根据元素的ID属性值选中一个元素</p><p>语法：#id属性值{}</p><p>例子：#box{ }  #red{ }</p><p>单独将相同标签名的形式进行改变，将要改的标签设置ID，通过ID进行选择设设置</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#red</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>//这部分的内容放在head的style里</code></pre><pre class=" language-css"><code class="language-css">&lt;p id=<span class="token string">"red"</span>> 内容 &lt;/p></code></pre><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>作用：根据元素的class属性值选中一组元素</p><p>语法：class属性值</p><p>class是一个标签的属性，它和ID类似，不同的是class可以重复使用</p><p>可以通过class属性来为元素分组</p><p>可以同时为一个元素指定多个class属性</p><pre class=" language-css"><code class="language-css">&lt;p class=<span class="token string">"blue abc"</span>>内容 &lt;/p>//两个class之间用空格隔开</code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.blue</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css">&lt;p class=<span class="token string">"blue"</span>> 内容 &lt;/p></code></pre><h3 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h3><p>作用：选中页面中的所有元素</p><p>语法：*</p><pre class=" language-css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>多个选择器的复合使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.red</span></span><span class="token punctuation">{</span>        <span class="token property">clolor</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">将class为red的div字体设置为30px    div<span class="token class">.red</span></span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是p标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>作用：选中复合多个条件的元素</p><p>语法：选择器1选择器2选择器3选择器n{}</p><p>选择器分组（并集选择器）</p><p>作用：通知选择多个选择器对应的元素</p><p>语法：选择器1，选择器2，选择器3，选择器n{}</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1,span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    我是一个div    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        我是div中的元素        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是p元素中的span元素/span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是div中的span元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>父元素</p><p>​    -直接包含子元素的元素叫做父元素</p><p>子元素</p><p>​    -直接被父元素博阿寒的元素是子元素</p><p>祖先元素</p><p>​    -直接或是间接包含后代元素的元素叫做祖先元素</p><p>​    -一个元素的父元素也是它的祖先元素</p><p>后代元素</p><p>​    -直接或间接被祖先元素包含的元素叫做后代元素</p><p>​    -子元素也是后代元素</p><p>兄弟元素</p><p>​    -拥有相同父元素的元素是校内兄弟元素</p><p>（为上述div的子元素设置一个字体颜色红色，为div直接包含的span设置一个字体颜色）</p><p>子元素选择器</p><p>作用：选中父元素的指定子元素</p><p>语法：父元素 &gt; 子元素</p><pre class=" language-css"><code class="language-css"><span class="token selector">div > span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="后代元素选择器"><a href="#后代元素选择器" class="headerlink" title="后代元素选择器"></a>后代元素选择器</h3><p>作用：选中指定元素内的指定后代元素</p><p>语法：祖先  后代</p><pre class=" language-css"><code class="language-css"><span class="token selector">div span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>div中的所有子代span元素全部变成skyblue。</p><p>选择下一个兄弟元素</p><p>语法：前一个，下一个</p><pre class=" language-css"><code class="language-css"><span class="token selector">p + span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>选择下面所有的兄弟元素</p><p>语法：兄  ~ 弟</p><pre class=" language-css"><code class="language-css"><span class="token selector">p ~ span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>[属性名]选择含有指定属性的元素</p><p>[属性名=属性值] 选择含有指定属性和属性值的元素</p><p>[属性值^=属性值]选择属性值以指定值开头的元素</p><p>[属性值$=属性值]选择属性值以指定值结尾的元素</p><p>[属性值*=属性值]选择属性值中含有某值的元素的元素 </p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token attribute">[属性（title）]</span>/p<span class="token attribute">[属性 = 属性值]</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪类（不存在的类，特殊的类）</p><p>​    伪类用来描述一个元素的特殊状态</p><p>比如：第一个子元素，被点击的元素、鼠标移入的元素</p><p>一般情况下都是使用：开头</p><p>：first-child</p><pre class=" language-css"><code class="language-css"><span class="token selector">ul>li<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>    第一个子元素<span class="token punctuation">}</span><span class="token selector">ul>li<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span>    最后一个子元素<span class="token punctuation">}</span><span class="token selector">ul>li<span class="token pseudo-class">:nth-child(n)</span></span><span class="token punctuation">{</span>    选中第n个子元素    特殊值    n的范围是<span class="token number">0</span>~正无穷    <span class="token number">2</span>n或even表示选中偶数位的元素    <span class="token number">2</span>n+<span class="token number">1</span>或odd表示选中奇数的元素    以上这些伪类都是根据所偶的子元素进行排序    ：first-of-type    ：last-of-type    ：nth-of-type    这几个伪类的功能和上述相似，不同点是他们是在同类型的元素中进行排序<span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span>否定伪类将符合条件的元素从选择器中q</code></pre><h3 id="超链接的伪类"><a href="#超链接的伪类" class="headerlink" title="超链接的伪类"></a>超链接的伪类</h3><p>在使用超链接的时候，访问过的链接会从蓝色变成紫色，可以使用a的伪类进行设置</p><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>//link表示没有访问过的链接（正常的链接）</code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span><span class="token punctuation">}</span>//visited表示没有访问过的链接，由于隐私的原因，所以visited只能修改链接的颜色，其他的都不能改</code></pre><p>：hover表示鼠标移入的一个状态</p><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>    样式设置<span class="token punctuation">}</span></code></pre><p>：active用来表示鼠标点击变换的样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:sctive</span></span><span class="token punctuation">{</span>    点击时会变换的样式<span class="token punctuation">}</span></code></pre><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素：表示页面中一些特殊的并不真实存在的元素（特殊的位置）</p><p>伪元素的开头：:</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token pseudo-element">::first-letter</span>(表示第一个字母)</span><span class="token punctuation">{</span>   样式语句<span class="token punctuation">}</span><span class="token selector">p<span class="token pseudo-element">::first-line</span>(表示第一个行)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token selector">p<span class="token pseudo-element">::selection</span>(表示选中的文字)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token selector">p<span class="token pseudo-element">::before</span>(表示标签元素的开始)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token selector">p<span class="token pseudo-element">::after</span>(表示标签元素的结束)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span></code></pre><p>before和after元素必须结合content使用，而且通过这两个添加的东西无法选中，因为时通过css添加的</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>  并不是所有的样式都会被继承，如：背景相关的，布局相关等的样式都不会被继承</p><h3 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h3><p>解决样式冲突</p><p>当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时</p><p>发生样式冲突时，有选择器的权重（优先级）决定</p><p>越精确优先级越高</p><p>内联样式 &gt; id选择器 &gt; 类和伪类选择器 &gt; 元素选择器 &gt; 通配选择器（*） &gt; 继承的样式 （没有优先级）</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201082001508.png" alt="Snipaste_2022-01-08_20-00-46"></p><p>可以在某一个样式的后面添加！important，则此时会获取到最高的优先级，甚至超过内联样式</p><h3 id="像素和百分比"><a href="#像素和百分比" class="headerlink" title="像素和百分比"></a>像素和百分比</h3><p> 长度单位：</p><h4 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h4><p>同样的200px在不同的设备下显示效果不一样</p><h4 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h4><p>可以将属性值设置为相对于父元素属性的百分比</p><p>设置百分比可以使子元素跟随父元素的改变而改变</p><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>一般浏览器默认的字体大小是16px</p><p>em是相对于元素的字体大小来计算的</p><p>1em=1font-size</p><p> 现阶段以像素为主</p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>是相对于根元素的字体大小来计算的（html的font-size）</p><h3 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h3><p>在CSS中可以直接使用颜色名来设置颜色</p><p>RGB</p><p>RGBA</p><p>就是在RGB的基础上增加了一个a表示不透明度</p><p>需要四个值，前三个值和RGB一样，第四个值表示不透明度</p><p>1表示完全不透明   0表示完全透明    .5半透明</p><p>十六进制的RGB值抹茶绿bbffaa</p><p>HSL值</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>文档流 ：</p><p>网页是一个 多层的结构，一层摞着一层，通过CSS可以分别为每一层来设置样</p><p>式，作为用户来讲只能看到最顶上一层，最底下的一层称为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列</p><p>对于元素主要有两个状态</p><p>在文档流中和不在文档流中</p><p>元素在文档流中有什么特点：</p><p>块元素：会在页面中独占一行，默认宽度是父元素的全部（会把父元素填满），默认高度是被内容撑开</p><p>行内元素：不会独占一行，只占自身大小，行内元素在页面中自左向右水平排列，如果一行之中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（书写习惯一致）</p><p>行内元素的默认宽度和高度都是被内容撑开</p><h3 id="盒模型："><a href="#盒模型：" class="headerlink" title="盒模型："></a>盒模型：</h3><p>CSS将页面中的所有元素都设置为了一个矩形的盒子</p><p>将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置</p><p>每一个盒子都有以下几个部分组成：</p><h5 id="内容区（contnet）"><a href="#内容区（contnet）" class="headerlink" title="内容区（contnet）"></a>内容区（contnet）</h5><p> 元素中的所有子元素和文本内容都在内容区中排列，内容区的大小有width和height两个属性来设置</p><p>width 设置内容区的宽度</p><p>height 设置内容区的高度</p><h5 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h5><p>内容区和边框之间的距离是内边距 </p><p>一共有四个方向的内边距:</p><p>padding-top</p><p>padding-right</p><p>padding-bottom</p><p>padding-left</p><p>内边距的设置会影响到盒子的大小，背景颜色会延申到内边距上</p><p>padding的简写属性，可以同时指定四个方向的内边距规则和border-width一一样</p><h5 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h5><p>边框的大小会影响到整个盒子的大小</p><p> 边框属于盒子边缘，边框里面属于盒子内部，出了边框都是盒子的外部，要设置边框，需要至少设置三个颜色样式：</p><p>边框的宽度：border-width（默认值，一般都是三个像素）指定四个方向的边框宽度</p><p>值的情况：</p><p>四个值：上、右、下、左（顺时针）</p><p>三个值：上、左右、下</p><p>两个值：上下、左右</p><pre class=" language-css"><code class="language-css"><span class="token property">border-width</span><span class="token punctuation">:</span><span class="token number">10</span>px <span class="token number">20</span>px <span class="token number">30</span>px <span class="token number">40</span>px</code></pre><p>除了border-width还有一组border-xxx-width</p><p>xxx可以是：top right bottom left</p><p>边框的颜色：border-color</p><p>用来指定边框的颜色，同样可以分别指定四个边的边框，规则和border-width一样</p><p>边框的样式：border-style（虚线、实线等）</p><p>solid表示实线</p><p>dotted点状虚线</p><p>ddashe 虚线</p><p>double双线</p><p>border简写属性：通过该属性可以同时设置所有的相关样式，并且没有顺序要求</p><pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">10</span>px red<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>//只设置一条边用的少</code></pre><pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px red solid<span class="token punctuation">;</span>//与上面只设置一条边的一样border-right：none<span class="token punctuation">;</span></code></pre><h5 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h5><p>外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置</p><p>一共有四个方向的外边距</p><p>margin-top:<br>margin-right:<br>margin-left:<br>margin-bottom: </p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201111948247.png" alt="Snipaste_2022-01-11_19-48-19"></p><p> 如果两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的，所以我们经常利用这个特点来使一个元素在其父元素中水平居中</p><p> 默认情况下父元素的高度被内容撑开，子元素内容有多高，父元素就有多高</p><p>子元素是在父元素的内容区中排列的，如果子元素超过了父元素，则子元素会从父元素中溢出，父元素不变</p><p>解决：使用overflow属性来设置父元素如何处理溢出的子元素</p><p>overflow可选值：visible 默认值，子元素会从父元素中溢出，在父元素外部显示</p><p>hidden：溢出内容将会被不会显示</p><p>scroll：生成两条滚动条，来显示完整内容</p><p>auto：根据需要生成滚动条</p><p>overflow-x     overflow-y</p><p>外边距的重叠（折叠）</p><p>相邻的垂直方向外边距会发生外边距重叠的现象</p><p>兄弟元素间的相邻垂直外边距会取两者之间的较大值（都是正值）</p><p>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）</p><p>解决：padding-top/边框1像素</p><p>行内元素不支持设置宽度和高度，行内元素可以设置padding但是垂直方向不会影响页面的布局，border、margin同理</p><p>display用来设置元素显示的类型</p><p>可选值：inline将元素设置为行内元素</p><p>block将元素设置为块元素</p><p>inline-block将元素设置为行内块元素，行内块，既可以设置宽度和高度又不会独占一行</p><p>table将元素设置为一个表格</p><p>none元素不在页面中显示</p><p>visibility用来设置元素的显示状态</p><p>可选值：visible默认值，在页面中正常显示</p><p>hidden 元素在页面中隐藏，但是任然占据页面位置</p><h3 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h3><p>通常情况下，浏览器都会为元素设置一些默认样式</p><p>默认样式的存在会影响到页面的布局，通常情况下必须要去除浏览器的默认样式</p><p>盒子是外边距存在默认样式，需要找到父元素进行更改为0</p><p>list-style:none去除项目符号，即点</p><p>手动写代码清楚样式表太麻烦，导入重置样式表，通过link引入</p><p>reset.css直接去除了浏览器的默认样式</p><p>normalize.css对默认样式进行了统一</p><p>要让一个文字在父元素中垂直居中，只需要将父元素的line-height设置为一个和父元素height一样的值，文字上下居中</p><p>尽量所有的元素都用标签给包起来，不裸露 </p><p>/的字体小于文字的大小，一般小上两个像素</p><p>去除下划线</p><pre class=" language-css"><code class="language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></code></pre><p>设置上边框</p><pre class=" language-css"><code class="language-css">border-top：<span class="token number">1</span>px solid color</code></pre><p>为了边框和文字的宽度一致，需要将h2转换为行内块元素</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block </code></pre><p>字体加粗</p><pre class=" language-css"><code class="language-css"><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span></code></pre><p>将文字放在图片上，下将文字放在图片下面，在通过margin-top来调整</p><p>通过before为伪元素，来为每一个li添加项符号</p><pre class=" language-css"><code class="language-css"><span class="token selector">li：：before</span><span class="token punctuation">{</span>    content：要加的    还能继续设置样式<span class="token punctuation">}</span></code></pre><p>默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定的</p><p>box-sizing 用来设置盒子尺寸的计算方式（设置widthheheight的作用）</p><p>可选值：content-box默认值，宽度和高度用来设置内容区的大小</p><p>border-box宽度和高度用来设置整个盒子的可见框的大小</p><p>width和height指的是内容区和内边距和边框的总大小</p><p>轮廓</p><p>outline用来设置元素的轮廓线，用法和border一样</p><p>轮廓线和边框不同的点，就是轮廓不会影响到可见框的大小</p><p>box-shadow用来设置元素的阴影效果，阴影不会印象页面布局</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span><span class="token number">10</span>px <span class="token number">10</span>px color</code></pre><p>第一个值 水平偏移量 设置阴影的水平位置 正值向右移动 负值反之</p><p>第二个值 垂直偏移量 设置阴影的水平位置 正值向下移动 负值反之</p><p>第三个值 阴影的模糊半径 </p><p>第四个值 阴影的颜色</p><p>圆角</p><p>border-radius用来设置圆角,圆角设置的圆的半径大小</p><p>border-top-left-radius</p><p>border-top-right-radius</p><p>border-bottom-left-radius</p><p>border-bottom-right-radius</p><p>一个值是以圆来画圆角，两个值是以椭圆来画圆角（指定那个角top left等）</p><p>四个值就是顺时针旋转的角顺序，从左上角开始</p><p>border-radius可以分别指定四个角的圆角</p><p>四个值  左上 右下 右下 左下</p><p>三个值 左上 右下/左下 右下</p><p>两个值 左上/右下  右上/左下</p><p>将元素设置为圆形，四个值设置为50%</p><p>浮动模型</p><p>通过浮动可以使一个元素向其父元素的左侧或右侧移动</p><p>使用float属性来设置于元素的浮动</p><p>可选值：none，元素不浮动</p><p>left元素向左浮动</p><p>right元素向右浮动</p><p>元素设置浮动以后，水平布局的等式便不需要强制成立</p><p>元素设置浮动以后，会完全从文档流中脱离，不在占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动</p><p>多个盒子水平排列，需要将其全部设置为浮动布局</p><p>特点总结：1、浮动元素会脱离文档流，不在占据文档流中的位置</p><p>2、设置浮动以后元素会向父元素的左侧或右侧移动</p><p>3、浮动元素默认不会从父元素中移出</p><p>4、浮动元素向左或是向右移动时，不会超过它前面的其他浮动元素</p><p>5、如果浮动元素的上边是一个没有浮动元素的块元素，则浮动元素无法上移</p><p>6、浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和他一样高</p><p>其他特点：浮动元素不会盖住文字，文字环绕</p><p>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离后，元素的一些特点也会发生变化</p><p>脱离了文档流的特点：快元素：1、块元素不在页面中独占一行</p><p>2、脱离后，块元素的宽度和高度默认都被内容撑开</p><p>行内元素：行内元素脱离后会变成块元素，特点和块元素一样</p><p>脱离文档流后，不需要区分块元素和行内元素</p><p>实际的开发中如果面临将行内元素设置为某一块元素的样式时，要将行内元素转换为块元素</p><pre class=" language-css"><code class="language-css">&lt;header>&lt;header>//表示网页的头部&lt;main>&lt;main>//网页的主题，一个网页中只能有一个main标签&lt;footer>&lt;footer>//网页的底部//可以用div代替</code></pre><h3 id="高度塌陷的问题"><a href="#高度塌陷的问题" class="headerlink" title="高度塌陷的问题"></a>高度塌陷的问题</h3><p> 在浮动布局中，父元素的高度默认是被子元素撑开的</p><p>当子元素浮动以后，其会完全脱离文档流，子元素从文档流中脱离</p><p>将会无法撑起父元素的高度，导致父元素的高度丢失，丢失以后，其下的元素会自动上移，导致页面布局的混乱</p><p>解决：</p><p>1、将父元素的高度写死（不建议）<br>2、BFC（Block Formatting Context）块级格式化环境<br>BFC是CSS中的一个隐含的属性，可以为一个元素开启BFC<br>开启后，该元素会变成一个独立的布局区域<br>开启后的特点：<br>1、开启BFC的元素不会被浮动元素所覆盖<br>2、开启BFC的元素子元素和父元素的外边距不会重叠<br>3、开启BFC的元素可以包含浮动的子元素</p><p>可以通过一些特殊的方式来开启元素的BFC</p><p>1、设置父元素的浮动（不推荐）</p><p>2、将元素设置为行内块元素</p><p>3、将元素的overflow设置为一个非visible（auto、hidden（常用））</p><p>如果我们不希望某个元素因为其他元素浮动的影响而改变位置，可以通过clear属性来清除浮动元素对当前元素所产生的影响</p><p>clear</p><p>作用：清楚浮动元素对当前元素所产生的影响</p><p>可选值：left清除左侧浮动元素对当前元素的影响</p><p>right清除右侧浮动元素对当前元素的影响</p><p>both清除两侧中最大影响的那侧</p><p>原理：设置清除浮动以后，浏览器会自动为元素添加一个上外边距，以使其位置不受其他元素的影响（解决高度塌陷的问题）</p><p>解决高度塌陷的最终方案</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201191933883.png"></p><p>解决父子元素的外边距同用问题</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201191946338.png" alt="Snipaste_2022-01-19_19-46-16"></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>是一种更加高级的布局手段</p><p>通过定位可以将元素摆放到页面的任意位置</p><p>使用position属性来设置定位</p><p>可选值：static 默认值，元素是静止的没有开启定位，只要不是static都是开启position</p><p>relative 开启相对定位</p><p>absolute 开启元素的绝对定位</p><p>fixed 开启元素额固定定位</p><p>sticky 开启元素的粘滞定位</p><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>relative</p><p>相对定位的特点：1、元素开启相对定位后，如果不设置偏移量元素不会发生任何的变化</p><p>2、相对定位是参照于元素在文档流中的位置进行定位的</p><p>3、相对定位会提升元素的层级</p><p>4、相对定位不会使元素脱离文档流</p><p>5、相对定位不会改变元素的性质块还是块，行内还是行内</p><p>偏移量（offset）</p><p>当元素开启定位后，可以通过偏移量来设置元素的位置</p><p>top  </p><p>定位元素和定位位置上边的距离</p><p>bottom</p><p>定位元素和定位位置下边的距离</p><p>定位元素垂直方向的位置由top和bottom控制，一般只使用其中一个</p><p>left</p><p>左侧</p><p>right</p><p>右侧</p><p>一般只使用其中一个</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>absolute，开启绝对定位</p><p>特点：1、开启绝对定位后，如果不设置偏移量元素的位置不会发生变化</p><p>2、开启绝对定位后，元素会从文档流中脱离</p><p>3、绝对定位会改变元素的性质，块会变成行内，行内的宽高会被内容撑开</p><p>4、绝对定位会使元素提升一个层级</p><p>5、绝对定位元素是相对于其包含快进行定位的</p><p>包含块（containing block）</p><p>正常情况下：包含块就是当前元素最近的祖先块元素</p><p>绝对定位的包含块：保安快就是离他最近的开启了定位的祖先元素，如果所有的祖先元素都没有开启定位则根元素就是他的包含块（html）   </p><p>当我们开启了绝对定位以后：</p><p>水平方向的布局等式就需要添加left和right两个值</p><p>此时规则和之前一样只是多添加了两个值：当发生过度约束：如果九个值中没有auto则自动调整auto的值以使等式满足</p><p>可设置auto的值</p><p>margin width left right</p><p>因为left和right的值默认是auto，所以如果不知道left和right则等式不满足时，会自动调整这两个值</p><p>垂直方向布局的等式也必须满足</p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>将元素的position属性设置为fixed则开启了元素的固定定位</p><p>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样</p><p>唯一不同的是固定定位永远参照于浏览器的可视窗口进行定位</p><p>固定定位的元素不会随网页的滚动条滚动</p><h3 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h3><p>sticky，当元素的position属性设置为sticky是则开启了元素的粘滞定位</p><p>粘滞定位和相对定位的特点基本一致</p><p>不同的是粘滞定位可以在元素到达某一位置时将其固定</p><p>兼容性不高，一般不适用这种方法来设置</p><h3 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h3><p>对于开启了定位元素，可以通过z-index属性来指定元素的层级</p><p>z-index需要一个整数作为一个整数作为参数，值越大元素的层级越高，越优先显示</p><p>如果元素的层级一样，则优先显示靠下的元素</p><p>祖先的元素的层级再高也不会盖住后代元素</p><h2 id="字体族"><a href="#字体族" class="headerlink" title="字体族"></a>字体族</h2><p> 字体相关的样式</p><p>color用来设置字体的大小</p><p>和font-size相关的单位</p><p>em相当于当前元素的一个font-size</p><p>rem相当于根元素的一个font-size</p><p>font-family字体族（格式）</p><p>可选值：</p><p>serif    衬线字体</p><p>sans-serif   非衬线字体</p><p>monospace 等宽字体</p><p>指定字体的类别，浏览器会自动使用该类别下的字体</p><p>可以同时指定多个字体，多个字体间使用，隔开字体生效时优先使用第一个，第一个无法使用则使用第二个，以此类推</p><pre class=" language-css"><code class="language-css"><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'字体名字'</span>，  ，  </code></pre><p>font-face可以将服务器中的字体直接提供给用户使用</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'起名字'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url()</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>问题：加载速度</p><p>版权</p><p>格式问题</p><p>图标字体（iconfont）</p><p>在网页中经常需要使用一些图标，可以使用图片来引入图标</p><p>但是图片大小本身比较大，并且非常不灵活，所以在使用图标时，我们还可以将图标直接设置为字体，然后通过font-size的形式进行引入</p><p>这样我们就可以通过使用字体的形式来使用图标</p><p>推荐使用fontawesome</p><p>使用步骤：下载web版fontasesome，解压，将CSS和webfonts两个文件夹移动到项目中，引入all.css引入到网页中</p><p>使用：直接通过类名来使用字体</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201201937237.png" alt="Snipaste_2022-01-20_19-37-21"></p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201201940323.png" alt="Snipaste_2022-01-20_19-40-09"></p><p>行高（line height）</p><p>行高指的是文字占有的实际高度</p><p>可以通过line-height来设置行高</p><p>行高可以直接指定一个大小（px em）也可以则直接设置为一个整数</p><p>如果是一个整数，行高捡回是字体的指定的倍数 </p><p>font简写属性</p><p>font可以设置字体相关的所有属性语法：font：字体大小/行高 字体族</p><p>行高可以省略不写</p><p>font-weight：字重，字体的加粗</p><p>可选值：bold加粗   normal默认</p><p>100-900九个级别（但是没什么用）</p><p>font-style 字体的风格</p><p>normal正常的   italic斜体</p><p>文本样式：</p><p>text-align 文本的水平对齐</p><p>可选值：left左侧对其   right右侧对其    center  居中对齐   justify两端对齐</p><p>vertical-align设置元素垂直对齐的方式</p><p>可选值：</p><p>baseline 默认值 基线对齐 top顶部对齐  bottom底部对齐  middle 居中对齐</p><p>可用来解决图片等内容于盒子不贴合问题</p><p>text-decoration设置文本修饰</p><p>可选值：none无  underline 下划线  line-through 删除线</p><p>overline 上划线</p><p>white-space设置网页如何处理空白</p><p>可选值：normal 正常  nowrap 不换行  pre 保留空白</p><p>长文本只显示一部分其他的用省略号代替，代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box1</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>background-color设置背景颜色</p><p>设置背景图片background-image： url（）</p><p>如果背景图片小于元素，则背景图片会自动在元素中平铺将元素铺满</p><p>图片大于元素，将会一个部分背景无法完全显示</p><p>一样大，则会正常显示</p><p>设置背景的重复方式background-repeat</p><p>可选值：repeat默认值，x，y双方向重复</p><p>repeat-x  repeat-y  no-repeat不重复</p><p>设置背景图片的位置</p><p>background-position 通过top 、left、right、bottom、center来控制及具体的位置，必须同时指定两个值，只写一个第二个值默认是cneter</p><p>还可以通过偏移量来控制</p><p>设置背景的范围</p><p>background-clip</p><p>可选值： border-box 默认值，背景会出现在边框的下边</p><p>padding-box 背景不会出现在边框，只出现在内容区和内边距</p><p>content-box背景只会出现在内容区</p><p>background-origin 背景图片的偏移量计算的原点</p><p>padding-box 默认值，background-position从内边距处开始计算</p><p>content-box背景图片从内容区处开始计算</p><p>bordeer背景图片的变量从边框处开始计算</p><p>设置背景图片的大小</p><p>background-size 第一个值表示宽度，第二个值表示高度</p><p>可选值：cover图片比例不变，将元素铺满</p><p>contain比例不变，将图片在元素中完整显示</p><p>background-attachment: 背景图片是否跟随元素移动</p><p>scroll默认值，背景图片会跟随元素移动</p><p>fixed背景会固定在页面中，不会随元素移动</p><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p> 通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其他颜色过渡的效果</p><p>渐变是图片，需要通过background-imge来设置</p><p>线性渐变，颜色沿着一条直线发生变化    linear-gradient（）</p><p> linear-gradient（red，yellow）红色在开头，黄色在结尾，中间是过渡区域</p><p>线性渐变的开头，我们可以指定一个渐变的方向</p><p>to left</p><p>to right</p><p>to bottom</p><p>to top</p><p>deg deg表示度数</p><p>turn 表示圈</p><p>渐变可以捅死指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况</p><p>repeating-linear-gradient（）可以平铺的线性渐变</p><p>径向渐变（发散）radial-gradient（）</p><p>默认情况下径向渐变的形状根据元素的形状来计算的</p><p>正方型&gt;&gt;圆心</p><p>长方形&gt;&gt;椭圆形</p><p>我们也可以手动指定径向渐变的大小</p><p>circle  ellipse </p><p>也可以指定渐变的位置</p><h2 id="弹性盒"><a href="#弹性盒" class="headerlink" title="弹性盒"></a>弹性盒</h2><p>flex（弹性盒）</p><p>是CSS中的有一种布局手段，它主要用来代替浮动来完成页面的布局</p><p>flex可以使元素具有弹性，让元素可以跟随页面的大小的该百年而改变</p><p>弹性容器</p><p>要使用弹性盒，必须先将一个元素设置为弹性容器</p><p>display：flex 设置块级弹性容器</p><p>display：inline-flex设置为行内的弹性容器</p><p>弹性元素</p><p>弹性容器的子元素是弹性元素（弹性项）</p><p>弹性容器可以同时是弹性容器</p><p>flex-direction指定容器中的弹性元素的排列方式</p><p>可选值：</p><p>row默认值，弹性元素在容器中水平排列，左向右</p><p>主轴：自左向右</p><p>row-reverse反向水平</p><p>主轴：自右向左</p><p>colum弹性元素纵向排列（自下向上）</p><p>colum-reverse弹性元素方向纵向排列</p><p>主轴：弹性元素的排列方向成为主轴</p><p>侧轴：于主轴垂直方向的成为侧轴</p><p>弹性元素的属性：</p><p>flex-grow指定弹性元素的伸展系数</p><p>当父元素有多余空间时，子元素如何伸展，父元素的剩余空间，会按照比例进行分配</p><p>flex-shrink指定弹性元素的收缩系数</p><p>当父元素的空间不足以容纳子元素时，对子元素进行收缩</p><p>flex-wrap</p><p>设置弹性元素是否子啊弹性容器中自定换行</p><p>可选值：nowarp默认值，元素不会自动换行</p><p>wrap元素沿着辅轴的方向自动换行</p><p>wrap-reverse元素沿着辅轴反方向换行</p><p>flex-flow：wrap和direction的简写属性</p><p>flex-flow：row，wrap；</p><h3 id="弹性容器"><a href="#弹性容器" class="headerlink" title="弹性容器"></a>弹性容器</h3><p>justify-contnet如何分配主轴上的空白空间（主轴上的元素如何排列）</p><p>可选值：</p><p>flex-start 元素沿着主轴起边排列</p><p>flex-end元素沿着主轴终边排列</p><p>center元素居中</p><p>space-around空白分布到元素额两侧</p><p>space-between空白均匀分布到元素间</p><p>space-evenly空白分布到元素的的单侧 </p><p> align-items </p><p>元素在辅轴上如何对齐</p><p>元素间的关系</p><p>可选值：</p><p>stretch默认值，将元素的长度设置为相同的值</p><p>flex-start元素不会拉伸，沿着辅轴起边对齐</p><p>flex-end沿着辅轴的终边对齐</p><p>center居中对齐</p><p>baseline基线对齐</p><p>align-content：与justify一样</p><h3 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h3><p>增长系数：flex-grow</p><p>缩减系数：flex-shrink</p><p>元素基础长度</p><p>flex-basis指定的是元素在主轴上的基础长度</p><p>如果主轴是横向的则该值指定的就是元素的宽度</p><p>如果主轴是纵向的则该值指定的就是元素的高度</p><p>默认值是auto，表示参考元素自身的盖度或宽度</p><p>如果传递一个具体的数值，则以该值为准</p><p>flex可以设置弹性元素所有的三个样式</p><p>flex增长 缩减 基础</p><p>initial flex 0 1 auto</p><p>auto flex 1 1 auto</p><p>none flex 0  0 auto没有弹性</p><p>order决定弹性元素的排列顺序</p><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p>网页可以根据不同的设备或窗口大小呈现出不同的效果</p><p>使用响应式布局，可以使一个网页适用于所有设备</p><p>响应式网页的关键就是  媒体查询</p><p>通过媒体查询，可以为不同的设备或设备不同状态了分别设置样式</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> 查询规则</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>媒体类型：</p><p>all所有设备</p><p>print 打印设备</p><p>screen带屏幕的设备</p><p>speech屏幕阅读器</p><p>可以使用逗号连接多个媒体类型</p><p>媒体特性：</p><p>width视口的宽度</p><p>height视口的高度</p><p>min-width视口的最小宽度（视口大于指定宽度是生效）</p><p>min-height视口的最大宽度</p><p>常用断点</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202201231546307.png" alt="Snipaste_2022-01-23_15-46-32"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YLUI云桌面</title>
      <link href="/2021/10/10/YLUI%E4%BA%91%E6%A1%8C%E9%9D%A2/"/>
      <url>/2021/10/10/YLUI%E4%BA%91%E6%A1%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客+Github+PicGo+jsdelivr图床搭建教程</title>
      <link href="/2021/10/03/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/"/>
      <url>/2021/10/03/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在Hexo博客中写文章时，我们会上传图片到博客中，但是我们会发现在Typora中正常插入的图片，在上传后不能再博客中不能正常显示，因为这里需要的时相对地址。这里选择搭建图床来解决这一问题。</p><p>网络上的免费图床有很多，这里选择GitHub+PicGo+jsdelivr来搭建。GitHub来当作我们存储博客图片的仓库，PicGo用来上传图片到GitHub，使用jsdelivr来提高博客中图片的加载速度。</p><h1 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h1><p>点击此链接下载<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-14-15.png" alt="Snipaste_2021-10-17_22-14-15"></p><p>下载.exe结尾的</p><p>点击打开</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-15-33.png" alt="Snipaste_2021-10-17_22-15-33"></p><p>图床设置</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-19-48.png" alt="Snipaste_2021-10-17_22-19-48"></p><p>这里需要填入GitHub里的数据</p><p>在GitHub里创建一个新的仓库用来存放图片</p><p>注意此处填写仓库名时，如果是从GitHub里直接复制过来的，需要将/两边的空格删掉，设定分支名直接填写默认的main就行</p><p>设定Token值</p><p>点击GitHub头像进入设置页面</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-28-13.png" alt="Snipaste_2021-10-17_22-28-13"></p><p>点击偏下方的Developer settings</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-30-24.png" alt="Snipaste_2021-10-17_22-30-24"></p><p>点击最下方的tokens</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-31-13.png" alt="Snipaste_2021-10-17_22-31-13"></p><p>点击Generate new token，按照如下设置进行设置，只需要点击rope一个选项即可，其余不用选择</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-32-15.png" alt="Snipaste_2021-10-17_22-32-15"></p><p>点击Generate new token完成创建</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-33-25.png" alt="Snipaste_2021-10-17_22-33-25"></p><p>回到该页面将Token值复制粘贴到PicGo即可</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/Snipaste_2021-10-17_22-34-48.png" alt="Snipaste_2021-10-17_22-34-48"></p><p>指定存储路径可自行设置</p><p>设置自定义域名直接按照<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%E6%A0%BC%E5%BC%8F%E7%9B%B4%E6%8E%A5%E5%A1%AB%E5%86%99%E5%B0%B1%E8%A1%8C%EF%BC%8C%E5%85%B7%E4%BD%93%E5%8E%9F%E7%90%86%E6%88%91%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%BE%88%E6%B8%85%E6%A5%9A%EF%BC%8C%E6%9C%89%E5%85%B4%E8%B6%A3%E7%9A%84%E5%8F%AF%E8%87%AA%E8%A1%8C%E7%99%BE%E5%BA%A6">https://cdn.jsdelivr.net/gh/用户名/仓库名格式直接填写就行，具体原理我也不是很清楚，有兴趣的可自行百度</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2021/09/07/MySQL/"/>
      <url>/2021/09/07/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL常用语句"><a href="#MySQL常用语句" class="headerlink" title="MySQL常用语句"></a>MySQL常用语句</h1><h2 id="一-、命令"><a href="#一-、命令" class="headerlink" title="一 、命令"></a>一 、命令</h2><p>刷新权限</p><pre class=" language-sql"><code class="language-sql">flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--刷新权限</span>mysql <span class="token operator">-</span>u <span class="token operator">-</span>p <span class="token comment" spellcheck="true">--链接数据库</span><span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authenication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> Host <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--修改用户密码</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看所有数据库</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> 数据库名 <span class="token comment" spellcheck="true">--切换数据库use数据库</span><span class="token keyword">Database</span> changed<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看数据库中的所有表</span><span class="token keyword">describe</span> student<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--显示数据库中所有的表的信息</span><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--创建一个数据库</span><span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--推出链接</span>DDL <span class="token comment" spellcheck="true">--数据库定义语言</span>DML <span class="token comment" spellcheck="true">--数据库操作语言</span>DQL <span class="token comment" spellcheck="true">--数据库查询语言*</span>DCL <span class="token comment" spellcheck="true">--数据库控制语言</span></code></pre><h2 id="二、操作数据库"><a href="#二、操作数据库" class="headerlink" title="二、操作数据库"></a>二、操作数据库</h2><p>操作数据库&gt;操作数据库中的表&gt;操作数据库中表的数据</p><p>==mysql中的关键字不区分大小写==</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--[]内的内容为可选</span><span class="token comment" spellcheck="true">--删除数据库</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span>使用数据库<span class="token comment" spellcheck="true">--tab键的上面，如果你的名字或是字段是一个特殊的字符，就需要加上``</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>数据库名<span class="token punctuation">`</span><span class="token comment" spellcheck="true">--查看数据库</span><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span></code></pre><h3 id="学习思路："><a href="#学习思路：" class="headerlink" title="学习思路："></a>学习思路：</h3><ul><li>对照sqlyog可视化历史记录查看sql</li><li>固定的语法或关键字必须要强行记住</li></ul><h2 id="三、数据库的列类型"><a href="#三、数据库的列类型" class="headerlink" title="三、数据库的列类型"></a>三、数据库的列类型</h2><blockquote><p>数值</p></blockquote><ul><li>tinyint       十分小的数据    1字节</li><li>smallint    较小的数据        2字节</li><li>mediumint  中等大小的数据   3个字节</li><li>int              标准的数据        4个字节</li><li>bigint         较大的数据        8个字节</li><li>float           浮点数                4个字节</li><li>double       浮点数                8个字节（精度问题）</li><li>decimal     字符串类型的浮点数   金融计算的时候，一般是使用decimal</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char         字符串固定的大小       0~255</li><li>varchar     可变字符串                 0~65535   常用的   String</li><li>tinytext      微型文本                    2^8-1</li><li>text              文本串                      2^16-1   保存大文本</li></ul><blockquote><p>时间日期</p></blockquote><ul><li>date       YYYY-MM-DD日期格式</li><li>time       HH：mm：ss时间格式</li><li>datetime  YYYY-MM-DD HH：mm：ss  常用的时间格式</li><li>timestamp  时间戳      1970.1.1到现在的毫秒数！</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li>==注意,不要使用NULL进行运算，结果为NULL==</li></ul><h2 id="四、数据库的字段属性（重点）"><a href="#四、数据库的字段属性（重点）" class="headerlink" title="四、数据库的字段属性（重点）"></a>四、数据库的字段属性（重点）</h2><p>Unsigned:</p><ul><li>无符号的整数</li><li>声明了该列不能为负数</li></ul><p>zerofill：</p><ul><li>0填充的</li><li>不足的位数，使用0来填充，   int（3），输入一个5，填充为:005</li></ul><p>自增（anto_increate):</p><ul><li>通常理解为自增，自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的主键~index，必须是整数类型</li><li>可自定义设计主键的起始值和步长</li></ul><p>非空 NULL NOT NULL:</p><ul><li>假设设置为not null，如果不给其赋值就会报错！</li><li>NULL，如果不填写值，默认就是null</li></ul><p>默认:</p><ul><li>设置默认的值</li><li>sex，默认值为男，如果不能指定该列的值，则会有默认的值</li></ul><h2 id="五、创建数据库表"><a href="#五、创建数据库表" class="headerlink" title="五、创建数据库表"></a>五、创建数据库表</h2><p>comment添加注释</p><p>格式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span>（    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span>，    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span>，    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span>，    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>表类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>字符集设置<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>数据库名<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">--查看创建该数据库的语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">--查看该表的定义语句</span><span class="token keyword">DESC</span> <span class="token comment" spellcheck="true">--显示表的结构</span></code></pre><h3 id="关于数据库的引擎"><a href="#关于数据库的引擎" class="headerlink" title="关于数据库的引擎"></a>关于数据库的引擎</h3><p>INNODB 默认使用的</p><p>MYISAM 早些年使用的</p><p>区别：</p><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持  表锁</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间的大小</td><td>较小</td><td>较大 约为2倍</td></tr></tbody></table><p>常规使用操作：</p><ul><li>MYISAM   节约空间，速度较快</li><li>INNODB   安全性高，事务的处理，多表多用户操作</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在data目录文件下，一个文件夹对应一个数据库</p><p>本质还是文件的存储</p><p>MySQL引擎在物理文件上的区别</p><ul><li><p>INNODB在数据库表中只有*.frm（文件类型），以及上级目录下的ibdara1文件</p></li><li><p>MYISAM对应文件</p><ul><li>*.frm   –表结构的定义文件</li><li>*.MYD 数据文件（data） </li><li>*.MYI  索引文件（index）</li></ul><blockquote><p>设置数据库表的字符集编码</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CHARSET</span><span class="token operator">=</span>UTF8</code></pre><p>​    不设置的话，回事MySQL默认的字符集编码，不支持中文</p><p>​    可以在my.ini(MySQL核心文件)中修改默认字符集，使其支持中文，但是不建议更改</p></li></ul><h2 id="六、修改删除表"><a href="#六、修改删除表" class="headerlink" title="六、修改删除表"></a>六、修改删除表</h2><p>修改表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> <span class="token keyword">RENAME</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>修改的名字<span class="token punctuation">`</span></code></pre><p>增加表的字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> <span class="token keyword">ADD</span> 字段名 列属性<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> <span class="token keyword">ADD</span> age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><p>修改表的字段（重命名，修改约束）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> <span class="token keyword">MODIFY</span> age <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--修改约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> CHANGE age age1 <span class="token keyword">INT</span>（<span class="token number">1</span>） <span class="token comment" spellcheck="true">--字段重命名</span></code></pre><p>change用来字段重命名，不能修改字段类型和约束；</p><p>modify不能用来字段重命名，只能修改字段类型和约束 </p><p>删除表的字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> <span class="token keyword">DROP</span> <span class="token punctuation">`</span>字段名<span class="token punctuation">`</span></code></pre><p>删除表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span> （如果表存在，则删除）</code></pre><p>所有的创建和删除尽量加上判断，以免报错</p><p>注意点：</p><ul><li>``字段名，使用这个包裹</li><li>注释： – /**/</li><li>sql关键字大小写不敏感，建议小写</li><li>所有符号全部英文</li></ul><h2 id="七、数据管理"><a href="#七、数据管理" class="headerlink" title="七、数据管理"></a>七、数据管理</h2><p>外键了解即可</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>grade<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>gradeID<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级ID'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gradename<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年级名称'</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gradeID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8创建表</code></pre><p>定义外键key</p><p>第一种：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">key</span> <span class="token punctuation">`</span>FK_表中的字段名<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>表中的字段名<span class="token punctuation">`</span><span class="token punctuation">)</span></code></pre><p>给这个外键添加约束，在创建表的时候使用，比较复杂</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">constraint</span> <span class="token punctuation">`</span>Fk_表中的字段名<span class="token punctuation">`</span> <span class="token keyword">Foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>字段名<span class="token punctuation">`</span><span class="token punctuation">)</span></code></pre><p>第二种：创建表的时候没有外键关系shujku </p><p>创建表成功后，在使用命令进行添加外键</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token punctuation">`</span>FK_字段名<span class="token punctuation">`</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>字段名<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">references</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>字段名<span class="token punctuation">`</span><span class="token punctuation">)</span></code></pre><p>以上的操作都是物理外键，数据库级别的外键，不建议使用（避免数据库过多造成困扰，这里了解即可）</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去实现）</li></ul><p>不使用外键的原因（阿里开发：不得使用外键与级联，一切的外键概念必须在应用层解决（使用Java代码去写））：每次做delete或者是update都必须考虑外键约束，会导致开发的时候很痛苦，测试数据即为不方便</p><h2 id="八、DML语言全部记住"><a href="#八、DML语言全部记住" class="headerlink" title="八、DML语言全部记住"></a>八、DML语言全部记住</h2><p>数据库意义：数据存储，数据管理</p><p>DML语言：数据操作语言</p><ul><li>insert</li><li>update</li><li>delete</li></ul><h4 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名（<span class="token punctuation">[</span>字段名<span class="token number">1</span>，字段名<span class="token number">2</span>，字段名<span class="token number">3</span><span class="token punctuation">]</span>） <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token punctuation">`</span>值<span class="token number">1</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">`</span>值<span class="token number">2</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">`</span>值<span class="token number">3</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">`</span>值<span class="token number">4</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><p>由于主键自增我们可以省略（如果不写表的字段，他就会一一对应）</p><p>一般写插入语句，我们一定要数据和字段一一对应</p><p>插入多个字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>表名<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>字段名<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span>（<span class="token punctuation">`</span>值<span class="token punctuation">`</span>），（值）<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>注意事项：</p><p>1、字段和字段之间使用英文逗号隔开</p><p>2、   字段可以是省略的，但是后面的值必须要一一对应，不能少</p><p>3、可以同时插入多条数据，values后面的值，需要使用，隔开即可</p><h4 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h4><p>update 修改谁 （条件） set 原来的值=新值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段（列）<span class="token operator">=</span>新值 <span class="token keyword">where</span> 指定某个数据不指定就会表中的所有某个字段数据全部会被替换成新值</code></pre><p>修改多个属性，逗号隔开。</p><p>条件：where子句 运算符 id等于某个值，在某个区间进行修改</p><table><thead><tr><th align="left">操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td align="left">=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td align="left">&lt;&gt;或！=</td><td>不等于</td><td>5&lt;&gt;6</td><td>true</td></tr><tr><td align="left">&gt;</td><td></td><td></td><td></td></tr><tr><td align="left">&lt;</td><td></td><td></td><td></td></tr><tr><td align="left">&lt;=</td><td></td><td></td><td></td></tr><tr><td align="left">&gt;=</td><td></td><td></td><td></td></tr><tr><td align="left">between…and…</td><td>在某个范围内</td><td>2-5</td><td></td></tr><tr><td align="left">and</td><td>&amp;&amp;</td><td></td><td></td></tr><tr><td align="left">or</td><td>||</td><td></td><td></td></tr></tbody></table><p>注意事项：</p><ul><li>colnum_name是数据库的列，尽量带上``</li><li>条件，筛选的条件，如果没有指定，则会修改所有的列</li><li>value，是一个具体的值，也可以是一个变量（一般之后时间会用）</li><li>多个设置属性之间，使用英文逗号隔开</li></ul><p>trim标签，将多余的逗号删掉</p><h4 id="delete命令"><a href="#delete命令" class="headerlink" title="delete命令"></a>delete命令</h4><p>语法：<code>delete form 表名 [where 条件]</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--删除数据（避免这样使用，会全部删除）</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token comment" spellcheck="true">--删除指定数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>truncate命令</p><p>作用：完全清空一个数据库表，表的结构和索引约束都不会改变</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span></code></pre><p>delete和truncate的区别</p><ul><li>相同点：都能删除数据，都不会删除表的结构</li><li>不同： </li><li><ul><li>truncate 重新设置，自增列，计数器会归零</li><li>truncate 不会影响事务</li></ul></li></ul><p>delete不影响自增</p><p>truncate影响自增，自增会归零</p><p>了解即可：delete删除的问题，重启数据库，现象</p><ul><li>InnoDB 自增列会从1开始（存在内存中，断电即失）</li><li>MyISAM 继续从上一个自增量开始（存在文件中的，不会丢失）</li></ul><h2 id="九、DQL查询语言（重点）"><a href="#九、DQL查询语言（重点）" class="headerlink" title="九、DQL查询语言（重点）"></a>九、DQL查询语言（重点）</h2><ul><li>所有的查询操作都使用select</li><li>简单的查询，复杂的查询它都能做</li><li>数据库中最核心的语言，最重要的语句</li><li>使用频率最高的语句</li></ul><h4 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h4><p>select 字段 from 表</p><p>别名，给字段起一个别名，AS，可以给字段起别名，也可以给表起别名</p><p>函数：concat（a，b）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'姓名：'</span><span class="token punctuation">,</span>字段名<span class="token punctuation">)</span> <span class="token keyword">AS</span> 新名字 <span class="token keyword">from</span> 表名</code></pre><p>输出查询结果是拼接上一个字符串</p><h4 id="去重复查询distinct"><a href="#去重复查询distinct" class="headerlink" title="去重复查询distinct"></a>去重复查询distinct</h4><p>作用：去除select查询结果中重复的数据，重复的数据只显示一条</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名</code></pre><p>数据库中的表达式：文本值，列，null，函数，计算表达式，系统变量</p><p>select 表达式，from 表名</p><h3 id="Where条件子句"><a href="#Where条件子句" class="headerlink" title="Where条件子句"></a>Where条件子句</h3><p>作用：检索数据中符合条件的值</p><p>搜索的条件由一个或者多个表达式组成，结果为布尔值</p><p>逻辑运算符</p><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>and  &amp;&amp;</td><td>a and b    a&amp;&amp;b</td><td>逻辑与</td></tr><tr><td>or    ||</td><td>a or b   a||b</td><td>逻辑或</td></tr><tr><td>not   ！</td><td>not a    ！a</td><td>逻辑非</td></tr></tbody></table><p>尽量使用英文字母</p><p>模糊查询：比较运算符</p><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>is null</td><td>a is null</td><td>如果操作符为null，结果为真</td></tr><tr><td>is not null</td><td>a is not null</td><td>如果操作符不为null，结果为真</td></tr><tr><td>between   and</td><td>a between b and c</td><td>若a在b和之间，则结果为真</td></tr><tr><td>like</td><td>a like b</td><td>SQL匹配，如果a匹配b，则结果为真</td></tr><tr><td>in</td><td>a ion(a1,a2,a3….)</td><td>假设a在a1，或者在a2…其中的某一个值中，结果为真</td></tr></tbody></table><p>like结合%（代表0到任意个字符） _(代表一个字符)</p><h4 id="联表查询join"><a href="#联表查询join" class="headerlink" title="联表查询join"></a>联表查询join</h4><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>inner join</td><td>如果表中至少有一个匹配，就返回行</td></tr><tr><td>left join</td><td>会从左表中返回所有的值，即使右表中没有匹配的</td></tr><tr><td>right join</td><td>会从右表中返回所有的值，即使左表中没有匹配的</td></tr></tbody></table><p>join（连接的表） on（判断的条件） 连接查询</p><p>where 等值连接</p><h4 id="自连接和联表查询练习"><a href="#自连接和联表查询练习" class="headerlink" title="自连接和联表查询练习"></a>自连接和联表查询练习</h4><p>自连接：自己的表和自己的表连接，核心一张表拆分为两张一样的表即可</p><h4 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h4><p>order by 通过哪个字段来排序，怎么排</p><p>为什么分页？</p><p>缓解数据库压力，给人的体验更好</p><p>分页，每页只显示5（可选）条数据</p><p>语法：limit起始页，页面的大小</p><p>（n-1）* pagesize</p><p>pagsize：页面大小，n：起始值</p><p>数据总数/页面大小=总页数</p><p> 例题：Java第一学年，课程成绩排名前十的学生，并且分数要大于80的学生信息（学号，姓名，课程名称，分数）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> s<span class="token punctuation">.</span>studentno<span class="token punctuation">,</span>studentname<span class="token punctuation">.</span>subjectname<span class="token punctuation">,</span>studentresult<span class="token keyword">from</span> student <span class="token keyword">as</span> s<span class="token keyword">inner</span> <span class="token keyword">join</span> result <span class="token keyword">as</span> r<span class="token keyword">on</span> s<span class="token punctuation">.</span>studentno <span class="token operator">=</span> r<span class="token punctuation">.</span>studentno<span class="token keyword">inner</span> <span class="token keyword">join</span> subject <span class="token keyword">as</span> sub<span class="token keyword">on</span> sub<span class="token punctuation">.</span>subjectname <span class="token operator">=</span> r<span class="token punctuation">.</span>subjectno<span class="token keyword">where</span> subjectname <span class="token operator">=</span> <span class="token string">'JAVA第一学年'</span> <span class="token operator">AND</span> studentresult<span class="token operator">>=</span><span class="token number">80</span><span class="token keyword">order</span> <span class="token keyword">by</span> studentresult <span class="token keyword">DESC</span><span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span></code></pre><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>where（这个值是计算出来的）</p><p>本质：在where语句中嵌套一个子查询语句 </p><h4 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h4><p>常用函数：</p><p>abs（）绝对值</p><p>ceiling（）向上取整</p><p>floor（）向下取整</p><p>rand（）返回一个0~1之间的随机数</p><p>sign 判断一个数的符号   负数返回-1，正数返回1 </p><p>char_length(‘内容’)  字符串长度</p><p>concat（’1’,’2’,’3’）拼接字符串</p><p>insert（）查询，替换，从某个位置开始替换某个长度</p><p>lower（’’）转小写</p><p>upper(‘’)转大写</p><p>instr （’’）返回第一次出现的子串的索引</p><p>replace（’’)  替换出现的字符串</p><p>substr（）返回指定的子字符串（源字符串，截取的位置，截取的长度）</p><p>reverse（）反转</p><p>current_date 获取当前日期</p><p>curdate （）  获取当前的日期</p><p>now（）获取当前的时分秒</p><p>localtime （） 本地时间</p><p>sysdate（）系统时间</p><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>count（）</td><td>计数</td></tr><tr><td>sum（）</td><td>求和</td></tr><tr><td>avg（）</td><td>平均值</td></tr><tr><td>max（）</td><td>最大值</td></tr><tr><td>min（）</td><td>最小值</td></tr><tr><td>….</td><td>…..</td></tr></tbody></table><p>​          </p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><h5 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h5><p>要么都成功，要么都失败</p><p>将一组SQL放在一个批次中去执行~</p><p>事务原则：ACID原则  原子性，一致性，隔离性，持久性（脏读，幻读）</p><p>原子性：</p><p>要么都成功，要么都失败</p><p>一致性：</p><p>事务前后的数据完整性要保证一致性</p><p>持久性：</p><p>事务一旦提交则不可逆，被持久化到数据库中</p><p>隔离性：</p><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，事务之间要相互隔离</p><p>隔离所导致的一些问题：</p><p>脏读，不可重复读，幻读  </p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>主键就是主键索引</p><p> 索引的分类，索引(index)是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构</p><ul><li><p>主键索引（primary  key）</p><ul><li>唯一的标识，主键不可重复</li></ul></li><li><p>唯一索引（unique  key）</p><ul><li>避免重复的列出现，唯一索引可以重复，多个列都可以标识为唯一索引</li></ul></li><li><p>常规索引(key/index)</p><ul><li>默认的，index，key关键字来设置</li></ul></li><li><p>全文索引(fulltext)</p><ul><li>在特定的数据库引擎下才有，MyISAM</li><li>快速定位数据 </li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建详细教程</title>
      <link href="/2021/08/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2021/08/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本博客是基于Hexo而搭建的，Hexo是一个快速、简介且高效的博客框架。Hexo使用Markdown（主要）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。并且Hexo具有很多的主题提供选择，使博客的搭建更加简单。下面来详细介绍基于Hexo的博客搭建教程。</p><blockquote></blockquote><h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ol><li>nodejs</li><li>Git</li><li>Github账号</li><li>备案好的域名（可选)</li><li>编译器</li></ol><blockquote></blockquote><h1 id="1-nodejs"><a href="#1-nodejs" class="headerlink" title="1.nodejs"></a>1.nodejs</h1><p><a href="https://nodejs.org/en/">node.js</a>点击进入该网站</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110011709939.png" alt="nodejs"></p><p>点击下载左边的即可。</p><p>下载完成后安装<img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110022117232.png" alt="nodejs1"></p><p>除修改安装路径外，其他安装选项默认即可，等待安装完成。</p><blockquote></blockquote><h1 id="2-Git"><a href="#2-Git" class="headerlink" title="2.Git"></a>2.Git</h1><p><a href="https://git-scm.com/">Git</a>点击进入该网站，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110031637071.png" alt="git0"></p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110031638765.png" alt="git1"></p><p>点击此处Download for Windows进入下载界面，等待下载（64位）、安装。</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110031638727.png" alt="git3"></p><p>除修改安装路径外，其他安装选项默认即可。正常安装完成后使用送鼠标对着空白桌面右键会出现Git的可执行选项，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110031641150.png" alt="git4"></p><blockquote></blockquote><h1 id="3-Github账号（已有请忽略）"><a href="#3-Github账号（已有请忽略）" class="headerlink" title="3.Github账号（已有请忽略）"></a>3.Github账号（已有请忽略）</h1><p><a href="https://github.com/">Github官方网站</a>点击进入网站后按照要求注册一个账号</p><p>点击此处的”New”创建新的仓库</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110031643872.png" alt="github0"></p><p>按照如题所示进行仓库的创建，注意此处的仓库名字须于创建账号时的名字相同，再在后面加上”.github.io”,（如：我的账号名字是Muqing7783，所以我要创建的仓库名字为Muqing7783.github.io）我这里报错是因为我已经创建过一个相同名字的仓库。其他选项可参考我的选择。</p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110031642678.png"  /><blockquote></blockquote><h1 id="4-域名（可选步骤）"><a href="#4-域名（可选步骤）" class="headerlink" title="4.域名（可选步骤）"></a>4.域名（可选步骤）</h1><p>如果需要将网站绑定域名，可以在网上购买域名，如：阿里、腾讯等的域名，这里推荐使用阿里的域名。</p><p>详细步骤请移看另一篇教程</p><blockquote></blockquote><h1 id="5-网站搭建具体操作"><a href="#5-网站搭建具体操作" class="headerlink" title="5.网站搭建具体操作"></a>5.网站搭建具体操作</h1><ul><li><p>安装Hexo</p><p>因为国内的npm下载很慢，所以先将npm的镜像更换为淘宝镜像，这里有两种替换镜像的命令</p><p>单次使用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p>永久使用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><p>使用下面的命令检查是否成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config get registry</code></pre><p>使用该命令后需要在后续的命令中在npm前加上c，没有npm的命令则不需要，本教程将不会再后续的命令中提示</p><p>在空白文件夹中右键，使用git bash输入命令</p><pre><code>npm install -g hexo-cli</code></pre><p>替换完淘宝镜像后再npm前加上c,后续的命令则都为不加c的，请操作时注意！</p><p>待安装完成后使用hexo -v查看hexo版本</p><p>至此hexo安装完成</p></li><li><p>初始化Hexo</p><pre class=" language-bash"><code class="language-bash">hexo init myblog</code></pre><p>myblog为可替换名称，可以根据自己的喜欢更换</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> myblog</code></pre><p>进入myblog文件夹，成功进入后git bash的头标也会相应的改变为相应的目录</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110042256708.png" alt="Snipaste_2021-10-04_22-56-08"></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><p>运行完成后，myblog文件夹会生成很多文件夹</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li> _config.yml: 博客的配置文件</li></ul></li><li><p>初始界面</p></li></ul><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p>依次运行上面两个命令，将会在本地生成一个静态网页</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110042306433.png" alt="Snipaste_2021-10-04_23-05-56"></p><p>在浏览器中输入<a href="http://localhost:4000即可查看">http://localhost:4000即可查看</a></p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110042311873.png" alt="Snipaste_2021-10-04_23-10-47"></p><p>界面类似这个，这里我修改了一些东西，所以有些东西不一样。进入本地该网页的时候需要确认hexo s服务是开启的不然无法查看界面</p><ul><li><p>生成SSH添加到GitHub</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span></code></pre><p>分别运行这两个命令，”yourname“为你的GitHub账号ID，“”youremail“为注册GitHub的邮箱</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><p>使用这两条命令检查是否正确</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span></code></pre><p>使用该命令生成SSH，一直回车知道提示生成.ssh文件夹，按照提示的目录找到.ssh文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051158535.png" alt="Snipaste_2021-10-05_11-58-40"></p><p>用记事本的方式点开id_rsa.pub文件，全部复制</p><p>打开GitHub</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051201465.png" alt="Snipaste_2021-10-05_12-01-42"></p><p>进入头像下的设置</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051202057.png" alt="Snipaste_2021-10-05_12-02-33"></p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051203273.png" alt="Snipaste_2021-10-05_12-03-29"></p><p>点击New SSH key添加SSH</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051204223.png" alt="Snipaste_2021-10-05_12-04-29"></p><p>Title随便写，将刚才复制的内容粘贴到key中，点击Add SSH key，SSH添加成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>使用该命令查看是否成功添加，若成功添加则会出现下面的描述</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051215954.png" alt="Snipaste_2021-10-05_12-15-43"></p><ul><li><p>将Hexo部署到GitHub</p><p>打开myblog文件夹中的_config.yml文件，拉到最后，将最后的信息修改为</p></li></ul><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: git@github.com:YourgithubName/YourgithubName.github.io.git  branch: main</code></pre><p>因为GitHub将之前的master分支改为main，所以这里的branch也更改为main，不影响使用</p><p>rope项在GitHub里复制，进入建好的仓库</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051220414.png" alt="Snipaste_2021-10-05_12-20-05"></p><p>点击Code-SSH</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202110051221506.png" alt="Snipaste_2021-10-05_12-20-54"></p><p>将其完整的复制下来即可。注：修改信息每个分号前都有一个空格，若没有将会导致部署失败</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>在myblog文件夹中右键git bash运行此命令，安装deploy-git，这样才能使用部署命令部署到GitHub</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><p>最后运行这三个命令进行部署，每次对博客进行修改后都需要重新上传部署，依然使用这三个命令</p><p>至此基于Hexo+GitHub的博客搭建完毕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2021/08/01/HTML/"/>
      <url>/2021/08/01/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML学习小结"><a href="#HTML学习小结" class="headerlink" title="HTML学习小结"></a>HTML学习小结</h1><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 注释：   --></span><span class="token comment" spellcheck="true">&lt;!--DOCTYPE告诉浏览器用什么规范 文档申明，使用的是html5--></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--head标签网页头部--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--meta标签 描述网站信息    --></span>    <span class="token comment" spellcheck="true">&lt;!--meta一般用来做SEO  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lishijie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>meta信息是隐藏的需要在源代码中看到<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- title标签，网站标题   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--body标签网页主体--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用name作为锚标记--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>Hello world<span class="token comment" spellcheck="true">&lt;!--标题标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--段落标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>两只老虎，两只老虎，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>跑得快，跑得快，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一只没有眼睛，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一只没有尾巴，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>真奇怪！真奇怪！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>两只老虎，两只老虎，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>跑得快，跑得快，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一只没有耳朵，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一只没有尾巴，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>真奇怪！真奇怪！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--水平线标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--换行标签        和段落标签有区别--></span>两只老虎，两只老虎，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>跑得快，跑得快 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>一只没有眼睛，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>一只没有尾巴，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>真奇怪！真奇怪！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>两只老虎，两只老虎，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>跑得快，跑得快，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>一只没有耳朵，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>一只没有尾巴，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>真奇怪！真奇怪！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--字体标签--></span>粗体：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>李世杰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>斜体：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>李世杰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--特殊符号--></span>空   格：只空一格     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>空<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>格:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token entity" title="&gt;">&amp;gt;</span> 大于号 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token entity" title="&lt;">&amp;lt;</span> 小于号 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 版权符 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--图像标签--></span><span class="token comment" spellcheck="true">&lt;!--src:图片地址    相对地址(推荐)    绝对地址（盘符目录）    ../   代表上一级目录alt:图片加载失败返回值title：鼠标悬停的时候显示的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../resource/image/avatar.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>头像<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>悬停文字<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--超链接标签--></span><span class="token comment" spellcheck="true">&lt;!--href:必填；链接地址_blank:新标签中打开_slef:在当前页面中打开--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 点击跳转到另一个网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../resource/image/avatar.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>err<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>嵌套图片地址，使图片可以跳转链接<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--锚链接--></span><span class="token comment" spellcheck="true">&lt;!--1.需要一个锚标记2.跳转到锚标记--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--功能性链接邮件链接：mailto：QQ链接：百度QQ推广--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:642563794@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击联系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--块元素：换行的标签是块元素    行内元素：不换行的标签--></span><span class="token comment" spellcheck="true">&lt;!--列表标签--></span><span class="token comment" spellcheck="true">&lt;!--有序列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--无序列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--自定义列表--></span><span class="token comment" spellcheck="true">&lt;!--dl:标签dt：列表标题dd：列表名称--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>fwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>tw<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>fwf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>fq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--表格--></span><span class="token comment" spellcheck="true">&lt;!--行：tr列：tdborder:边框属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--colspan  跨列    rowspan  跨行--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>狂神<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>语文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>语文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--媒体元素--></span><span class="token comment" spellcheck="true">&lt;!--音频和视频--></span><span class="token comment" spellcheck="true">&lt;!--controls:播放选项（进度条）autoplay:自动播放--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>与图片的链接相同<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>同上<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--页面结构--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>网页头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>网页主体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>网页脚部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>导航类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--iframe内联框架--></span><span class="token comment" spellcheck="true">&lt;!--src：地址name：框架标识名--></span>&lt;iframe src="" name="lishijie'S Blog" frameborder="0"width="1000px" height="1000px"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.lishijie.xyz<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lishijie<span class="token punctuation">'</span>S Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--表单--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--action:表单提交的位置，可以是网站，也可以是请求处理地址method：post get两种提交方式get：我们可以在地址栏中看见密码post：安全，传输大文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--文本输入框&lt;input type="text">vale默认初始值maxlength 能写的最长的长度size文本框的长度placeholder 提示required 必填 不填无法提交pattern  正则表达式--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>名字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码：&lt;input type="password"name="pwd"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--单选框--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别     &lt;input type="radio" value="boy"name="sex">男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>girl<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--多选框checked默认选择--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        &lt;input type="checkbox" value="sleep" name="hoppy"checked>睡觉        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hoppy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>代码        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chat<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hoppy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>聊天        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>play<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hoppy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>玩    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--按钮--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--input type="button"    普通按钮input type="image"     图像按钮input type="submit"    提交按钮input type="reset"     重置按钮--></span><span class="token comment" spellcheck="true">&lt;!--下拉框 ，列表框--></span><span class="token comment" spellcheck="true">&lt;!--selexted默认选择--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>列表名称<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &lt;option value="选项的值"selected>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选项的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选项的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>俄罗斯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选项的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--文本域--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            内容        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--文件域--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--邮件验证--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>邮箱        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--URl--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>URl        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--数字--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>  <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--滑块--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>音量：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--搜索框--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>标签分类</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--超链接--></span>title的值是鼠标悬浮在链接上显示的值target的不同值有不同的效果,默认是不打开新的网页_blank是打开新的网页进入链接，对原网页没有影响_top是原地跳转，不打开新的网页，对原网页有影响_parent_self 默认选<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span>和<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span>没有尾标签。是自结束标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>字体标签，调整字体颜色，大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">></span></span>:charest:指定网页中的字符集name:指定的数据名称content:指定的数据内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>内容，加上这个之后可以更容易的被搜索到<span class="token punctuation">"</span></span>      <span class="token attr-name">倒计时跳转：</span>     <span class="token attr-name">&lt;meta</span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">hrrp-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>倒计时秒数; url:链接地址<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    p标签中不能放h1标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>header标签标识王网页的头部main表示网页的主体部分（一个页面中只会有一个main）footer表示网页的底部nav标签表示网页中的导航aside标签和主体相关的其他内容（侧边栏）article标签表示一个独立的文章section标签表示一个独立的区块，上边的标签都不能表示时使用sectionh5新增的，用的不多 div没有语义，就用来表示一个区块，目前来讲div说我们主要的布局元素span行内元素，美誉任何的语义，一般用来在网页中选中文字 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习</title>
      <link href="/2021/08/01/Java%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/08/01/Java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="原环境的卸载"><a href="#原环境的卸载" class="headerlink" title="原环境的卸载"></a>原环境的卸载</h2><h3 id="卸载JDK"><a href="#卸载JDK" class="headerlink" title="卸载JDK"></a>卸载JDK</h3><p>1.删除Java的安装目录</p><p>2、先将环境变量中的jdk地址和Java-HOME变量删除</p><p>​      path变量中还有一个Java—HOME变量删除</p><p>3、进入CMD，查看Java -version</p><h3 id="安装JDK8"><a href="#安装JDK8" class="headerlink" title="安装JDK8"></a>安装JDK8</h3><p>记住jdk的安装路径</p><p>配置环境变量：</p><p>进入环境变量设置—–添加JAVA_HOME环境变量设置</p><p>相同的配置path中的jdk的bin目录变量</p><p>使用java -version查看是否有Java版本，如果安装没有出错，就重启电脑在进行查看</p><h3 id="程序部分"><a href="#程序部分" class="headerlink" title="程序部分"></a>程序部分</h3><p>可能会遇到的问题，<strong>Java是大小写敏感的</strong></p><p>尽量使用英文</p><p>程序的文件名和类名必须保持一致，并且首字母大写</p><p>java既有编译型的特征又有解释型的特征</p><p>JavaDoc注释：文档注释</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***@Description*@Author*/</span>使用的少</code></pre><p>Java是一个强类型的语言</p><p>要求变量的使用要严格复合规定，所有变量都必须先定义后才能使用</p><p>数据类型：</p><p>整数类型：byte占1个字节</p><p>​                    short占2个字节</p><p>​                    int占4个字节</p><p>​                    long占8个字节</p><p>浮点类型：float占4个字节</p><p>​                    double占8个字节</p><p>字符类型char占8个字节</p><p>boolean占1个字节</p><p>long类型的数据要在数据后加一个大写的L</p><p>整形在控制输出前面输出有零时只需要在加上%几d，即可</p><p>float类型数据要在数据后加一个大写的F，用于数据区分</p><p>布尔值是非对错</p><p>boolean flag = true;</p><p>boolean flag = false;</p><p>字符：char</p><p>字符串：String（不是关键字，是一个类），定义使用时和其他的一样</p><p>引用类型：类，接口，数组</p><p>舍入误差</p><p>最好完全避免使用浮点数进行比较</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转义字符</span><span class="token comment" spellcheck="true">//\t  制表符（空格）</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HELLO \t world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//\n 换行</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello\nworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类型转换</p><p>强制转换   高到低（在要转换的类型前的加上括号（这里写上要转换的类型））</p><p>自动转换   低到高</p><p>不能对布尔值进行转换，不能把对象类型转换成不相干的类型</p><p>把高容量转换到低容量的时候，强制转换</p><p>转换的过程中可能会存在内存溢出，或者是精度问题</p><p>类变量：要在前面加上static，位置与实例变量一样</p><p>实例变量（在类里面，方法的外面）从属于对象，不用初始化赋值，不赋值则输出默认值，在方法里引用</p><p>布尔值默认是false</p><p>读入三个整数，按每个整数占 88 个字符的宽度，右对齐输出它们。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8d"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>局部变量在方法里面，变量应用范围小（类似于函数中定义变量），必须声明和</p><p>初始化值</p><p>常量 final double PI = 3.14;（类似于C语言的define）</p><p>final是修饰符</p><p>变量的命名规范：</p><p>所有变量、方法、类名：见名知意</p><p>类成员变量：首字母小写和驼峰原则：monthSalary</p><p>局部变量：首字母小写和驼峰原则</p><p>常量变量：大写字母和下划线：MAX_VALUE</p><p>类名：首字母大写和驼峰原则：Man，GoodMan</p><p>方法名：首字母小写和驼峰原则：run()，runRun( )</p><p>位运算：与二进制有关（效率极高）</p><p>​        //       &amp;    与    两个位都为1时，结果才为1</p><p>​        //       |    或    两个位都为0时，结果才为0</p><p>​        //       ^    异或    两个位相同为0，相异为1</p><p>​        //       ~    取反    0变1，1变0</p><p>​        //       &lt;&lt;    左移    相当于乘以2   各二进位全部左移若干位，高位丢弃，低位补0</p><p>​        //       &gt;&gt;    右移    相当于除以2   各二进位全部右移若干位，对无符号数，高</p><p>位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> f<span class="token operator">=</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>f<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的是布尔值为false</span><span class="token keyword">float</span> d1 <span class="token operator">=</span> <span class="token number">12313241412412424f</span><span class="token punctuation">;</span><span class="token keyword">float</span> d2 <span class="token operator">=</span> d1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token operator">==</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>输出为<span class="token boolean">true</span><span class="token comment" spellcheck="true">//原因：浮点数能表示的是有限的，舍入误差，最好避免使用浮点数进行比较</span><span class="token comment" spellcheck="true">//Big Decimal类进行比较</span></code></pre><p>字符串连接符：</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//""是String类型，会将+y的全部转换为String在进行运算，结果为直接连接</span></code></pre><p>Java控制位数输出格式在System.out.prin后加上f，即可跟C语言一样</p><p>布尔型与整形之间的转换：</p><p>将一个整型变量的值赋给一个布尔型变量，再将这个布尔型变量的值赋给一个整型变量，得到的值是多少？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int 转 boolean</span>        i <span class="token operator">=</span> b<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//boolean 转 int</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JavaDoc</p><p>加在类的上面就是类的注释，加在方法的上面就是方法的注释</p><h3 id="Scnner"><a href="#Scnner" class="headerlink" title="Scnner"></a>Scnner</h3><p>next()接收：</p><p>1、一定要读取到有效字符后才可以结束输入</p><p>2、对输入有效字符之前遇到的空白，next()方法会将其去掉</p><p>3、只有输入有效字符后才将其后面的空白作为分隔符或结束符</p><p>4、next()不能带有空格的字符串</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个扫描器对象，用于接受键盘数据</span>       Scanner scnner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用next方式接收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串</span>        <span class="token comment" spellcheck="true">//判断用户是否输入字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>scnner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String str <span class="token operator">=</span> scnner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//凡是属于IO流的类如果不关闭会一直占用资源，用完就要关掉</span>        scnner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>nextLine()接收：</p><p>1、以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符</p><p>2、可以获得空白字符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scnner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用nextLine方式接收："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scnner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String str <span class="token operator">=</span> scnner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scnner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>equals判断字符串是否相等</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>scannner<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断scanner存储的字符串是否与hello相等</span></code></pre><p>增强for循环</p><p>输出数组：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历数组的元素</span></code></pre><h3 id="方法详解-相当于C-的函数"><a href="#方法详解-相当于C-的函数" class="headerlink" title="方法详解(相当于C++的函数)"></a>方法详解(相当于C++的函数)</h3><p> System.out.println()；</p><h3 id="类-对象-方法"><a href="#类-对象-方法" class="headerlink" title="类/对象/方法"></a>类/对象/方法</h3><p>Java方法是语句的集合，他们在一起执行一个功能</p><p>​    方法是解决一类问题大的步骤的有序组合</p><p>​    方法包含于类或对象中</p><p>​    方法在程序中被创建，在其他地方被引用</p><p>一个方法只完成一个功能 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202202031522504.png" alt="Snipaste_2022-02-03_15-22-01"></p><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法的名字不同，方法名相同，数据类型不同，</p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202202031543994.png" alt="Snipaste_2022-02-03_15-43-02"></p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>JDK1.5开始，Java支持传递同类型的可变参数给一个方法</p><p>在方法声明中，在指定参数类型后加一个省略号（…）</p><p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，任何普通的参数必须在它之前声明</p><h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><p>递归头：什么时候不调用自身方法，如果没有头，将陷入死循环</p><p>递归体：什么时候需要调用自身方法</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是相同类型数据的有序集合</p><p>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</p><p>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下表来访问他们</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义,首选</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个数组</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>；<span class="token comment" spellcheck="true">//赋值</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202202041455431.png" alt="Snipaste_2022-02-04_14-55-02"></p><h4 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h4><p>打印数组元素Arrays.toString（） </p><p><img src="https://cdn.jsdelivr.net/gh/Muqing7783/imgbed/posts/202202041636305.png" alt="Snipaste_2022-02-04_16-36-38"></p><p>稀疏数组</p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志</title>
      <link href="/2021/07/29/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2021/07/29/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>7.20</p></blockquote><p>网站建站完成，并上传了介绍文章</p><blockquote><p>7.21</p></blockquote><p>针对matery主题进行个性化优化</p><blockquote><p>7.22</p></blockquote><p>使用Valine配置了评论与留言板功能</p><blockquote><p>7.23</p></blockquote><p>进行优化</p><blockquote><p>7.29</p></blockquote><ul><li><p>发现文章无法正常上传，问题已解决</p></li><li><p>优化了文章中代码的显示问题，但是顶部出现了图标消失问题，比较怪异</p></li><li><p>评论和留言版功能进行了优化</p></li></ul><blockquote><p>8.17</p></blockquote><p>深度优化代码块，视觉体验提高了很多，但是再复制时的复制条重叠问题仍然没有解决</p><blockquote><p>8.18</p></blockquote><p>代码块全部优化完毕，整理笔记，准备上传</p><blockquote><p>8.19</p></blockquote><ul><li>更新博客</li><li>评论留言功能整体优化</li></ul><blockquote><p>8.20</p></blockquote><ul><li>更新网站音乐部分</li><li>解决手机查看时标题换行问题</li></ul><blockquote><p>8.26</p></blockquote><p>更新网页界面颜色和网站小标</p><blockquote><p>9.1</p></blockquote><p>网站的图片不能正常显示不是文章书写问而是图床管理问题，集体原因不确定，目前的解决想法为搭建一个新的图床仓库</p><blockquote><p>10.1</p></blockquote><p>图床问题解决</p><blockquote><p>10.12</p></blockquote><p>YLUI云桌面搭建完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂</title>
      <link href="/2021/07/22/%E6%9D%82/"/>
      <url>/2021/07/22/%E6%9D%82/</url>
      
        <content type="html"><![CDATA[<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h1 id="1-学习随笔"><a href="#1-学习随笔" class="headerlink" title="1. 学习随笔"></a>1. 学习随笔</h1><ul><li>博客的文章格式的不正确会导致无法正常上传  tags空格问题</li><li>博客代码块的{}被转义，在博客的代码中进行替换</li><li>Java的包机制</li><li>YLUI云做桌面</li></ul><h1 id="2-学习规划"><a href="#2-学习规划" class="headerlink" title="2. 学习规划"></a>2. 学习规划</h1><ul><li>目前需要学习C++、CSS3、Js、web实战项目、MySQL</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2021/07/22/Markdown/"/>
      <url>/2021/07/22/Markdown/</url>
      
        <content type="html"><![CDATA[<p><strong>Markdown</strong>是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等。</p><p>其语法如下：</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>1.#加文字为一级标题</p><p>2.##加文字为二级标题</p><p>3.###加文字为三级标题</p><p>其他标题同理，需要几级标题，就需要几个#，最高位六级标题</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>hello world！</strong>(文字两边加两个*为粗体)</p><p>*hello world!<em>（文字两边加一个</em>为斜体）</p><p>***hello world!**<em>（文字两边三个</em>为加粗斜体）</p><p><del>hello world!</del>(文字两边两个~为添加删除线效果)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>需要引用的话（&gt;加文字为引用）</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><p>三个*或-都是分割线</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="C:\Users\lishijie\Desktop\avatar.jpeg" alt="‪头像">（！[名字]（图片地址）)本地图片</p><p>网络图片只需要将图片地址更改为其图片地址即可，可以看该网页的源码查看其图片地址</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://space.bilibili.com/357458696">我的Bilibili账号</a></p><p>其语法为[链接名字]  (链接地址)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>A</li><li>B</li><li>C</li></ol><p>数字后加空格自动变成列表</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>| 姓名 | 性别 | 生日 |</p><p>|  –   | – | – |</p><p>| 李世杰 | 男 | 2001.6.4 |</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>三个`中间用来写代码(webstorm不适合用来写Markdown，建议使用其他的Markdown编译器)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍</title>
      <link href="/2021/07/20/%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/07/20/%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到李世杰的个人网站！这个网站是基于Hexo为基础建的，网站刚建起来比较简陋，很多的功能与想法都还没有实现；目前的针对这个网站的计划是一边学习前端知识，一边去完善，可能需要很长的时间；我平时也会将自己的学习情况写成博客上传到网站上，希望有兴趣的朋友可以阅读并提出意见。冲冲冲！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
